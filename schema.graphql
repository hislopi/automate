# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

"Add date formatting options."
directive @dateformat(difference: String, formatString: String, fromNow: Boolean, locale: String) on FIELD_DEFINITION

"Link to node by foreign-key relation."
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

"Link to File node by relative path."
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

"Proxy resolver from another field."
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

"Infer field types from field values."
directive @infer on OBJECT

"Do not infer field types from field values."
directive @dontInfer on OBJECT

"Define the mime-types handled by this type."
directive @mimeTypes(
    "The mime-types handled by this type."
    types: [String!]! = []
) on OBJECT

"Define parent-child relations between types. This is used to add `child*` and `children*` convenience fields like `childImageSharp`."
directive @childOf(
    "A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin."
    mimeTypes: [String!]! = [],
    "A list of types this type is a child of. Usually these are the types handled by a transformer plugin."
    types: [String!]! = []
) on OBJECT

"""

DEPRECATED: Use interface inheritance instead, i.e. "interface Foo implements Node".

Adds root query fields for an interface. All implementing types must also implement the Node interface.
"""
directive @nodeInterface on INTERFACE

"Node Interface"
interface Node {
    children: [Node!]!
    id: ID!
    internal: Internal!
    parent: Node
}

interface PrismicSharedSliceType {
    id: ID!
    slice_label: String
    slice_type: String!
    variation: String!
    version: String!
}

interface PrismicSliceType {
    id: ID!
    slice_label: String
    slice_type: String!
}

union PrismicAllDocumentTypes = PrismicCaseStudies | PrismicHomepage | PrismicPage | PrismicShowroom | PrismicSiteData

union PrismicCaseStudiesDataBodySlicesType = PrismicCaseStudiesDataBodyBanner | PrismicCaseStudiesDataBodyCards | PrismicCaseStudiesDataBodyContactForm | PrismicCaseStudiesDataBodyContentBlock | PrismicCaseStudiesDataBodyFaqs | PrismicCaseStudiesDataBodyFeature | PrismicCaseStudiesDataBodyFeatureSlider | PrismicCaseStudiesDataBodyFullHero | PrismicCaseStudiesDataBodyGallery | PrismicCaseStudiesDataBodyGridCards | PrismicCaseStudiesDataBodyImageBlock | PrismicCaseStudiesDataBodyIntroductionContent | PrismicCaseStudiesDataBodyShowroom | PrismicCaseStudiesDataBodySpacer | PrismicCaseStudiesDataBodyTwoColumnContent | PrismicCaseStudiesDataBodyVideoBlock

union PrismicHomepageDataBodySlicesType = PrismicHomepageDataBodyBanner | PrismicHomepageDataBodyCards | PrismicHomepageDataBodyContactForm | PrismicHomepageDataBodyContentBlock | PrismicHomepageDataBodyFaqs | PrismicHomepageDataBodyFeature | PrismicHomepageDataBodyFeatureSlider | PrismicHomepageDataBodyFullHero | PrismicHomepageDataBodyGallery | PrismicHomepageDataBodyGridCards | PrismicHomepageDataBodyImageBlock | PrismicHomepageDataBodyIntroductionContent | PrismicHomepageDataBodyShowroom | PrismicHomepageDataBodySpacer | PrismicHomepageDataBodyTwoColumnContent | PrismicHomepageDataBodyVideoBlock

union PrismicPageDataBodySlicesType = PrismicPageDataBodyBanner | PrismicPageDataBodyCards | PrismicPageDataBodyContactForm | PrismicPageDataBodyContentBlock | PrismicPageDataBodyFaqs | PrismicPageDataBodyFeature | PrismicPageDataBodyFeatureSlider | PrismicPageDataBodyFullHero | PrismicPageDataBodyGallery | PrismicPageDataBodyGridCards | PrismicPageDataBodyImageBlock | PrismicPageDataBodyIntroductionContent | PrismicPageDataBodyShowroom | PrismicPageDataBodySpacer | PrismicPageDataBodyTwoColumnContent | PrismicPageDataBodyVideoBlock

type Directory implements Node {
    absolutePath: String!
    accessTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atimeMs: Float!
    base: String!
    birthTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    birthtime: Date @deprecated(reason: "Use `birthTime` instead")
    birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
    changeTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    children: [Node!]!
    ctime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    ctimeMs: Float!
    dev: Int!
    dir: String!
    ext: String!
    extension: String!
    gid: Int!
    id: ID!
    ino: Float!
    internal: Internal!
    mode: Int!
    modifiedTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtimeMs: Float!
    name: String!
    nlink: Int!
    parent: Node
    prettySize: String!
    rdev: Int!
    relativeDirectory: String!
    relativePath: String!
    root: String!
    size: Int!
    sourceInstanceName: String!
    uid: Int!
}

type DirectoryConnection {
    distinct(field: DirectoryFieldsEnum!): [String!]!
    edges: [DirectoryEdge!]!
    group(field: DirectoryFieldsEnum!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
    max(field: DirectoryFieldsEnum!): Float
    min(field: DirectoryFieldsEnum!): Float
    nodes: [Directory!]!
    pageInfo: PageInfo!
    sum(field: DirectoryFieldsEnum!): Float
    totalCount: Int!
}

type DirectoryEdge {
    next: Directory
    node: Directory!
    previous: Directory
}

type DirectoryGroupConnection {
    distinct(field: DirectoryFieldsEnum!): [String!]!
    edges: [DirectoryEdge!]!
    field: String!
    fieldValue: String
    group(field: DirectoryFieldsEnum!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
    max(field: DirectoryFieldsEnum!): Float
    min(field: DirectoryFieldsEnum!): Float
    nodes: [Directory!]!
    pageInfo: PageInfo!
    sum(field: DirectoryFieldsEnum!): Float
    totalCount: Int!
}

type File implements Node {
    absolutePath: String!
    accessTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    atimeMs: Float!
    base: String!
    birthTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    birthtime: Date @deprecated(reason: "Use `birthTime` instead")
    birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
    blksize: Int
    blocks: Int
    changeTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    "Returns the first child node of type ImageSharp or null if there are no children of given type on this node"
    childImageSharp: ImageSharp
    children: [Node!]!
    "Returns all children nodes filtered by type ImageSharp"
    childrenImageSharp: [ImageSharp]
    ctime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    ctimeMs: Float!
    dev: Int!
    dir: String!
    ext: String!
    extension: String!
    gid: Int!
    id: ID!
    ino: Float!
    internal: Internal!
    mode: Int!
    modifiedTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    mtimeMs: Float!
    name: String!
    nlink: Int!
    parent: Node
    prettySize: String!
    "Copy file to static directory and return public url to it"
    publicURL: String
    rdev: Int!
    relativeDirectory: String!
    relativePath: String!
    root: String!
    size: Int!
    sourceInstanceName: String!
    uid: Int!
    url: String
}

type FileConnection {
    distinct(field: FileFieldsEnum!): [String!]!
    edges: [FileEdge!]!
    group(field: FileFieldsEnum!, limit: Int, skip: Int): [FileGroupConnection!]!
    max(field: FileFieldsEnum!): Float
    min(field: FileFieldsEnum!): Float
    nodes: [File!]!
    pageInfo: PageInfo!
    sum(field: FileFieldsEnum!): Float
    totalCount: Int!
}

type FileEdge {
    next: File
    node: File!
    previous: File
}

type FileGroupConnection {
    distinct(field: FileFieldsEnum!): [String!]!
    edges: [FileEdge!]!
    field: String!
    fieldValue: String
    group(field: FileFieldsEnum!, limit: Int, skip: Int): [FileGroupConnection!]!
    max(field: FileFieldsEnum!): Float
    min(field: FileFieldsEnum!): Float
    nodes: [File!]!
    pageInfo: PageInfo!
    sum(field: FileFieldsEnum!): Float
    totalCount: Int!
}

type ImageSharp implements Node {
    children: [Node!]!
    fixed(background: String = "rgba(0,0,0,1)", base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpFixed
    fluid(
        background: String = "rgba(0,0,0,1)",
        base64Width: Int,
        cropFocus: ImageCropFocus = ATTENTION,
        duotone: DuotoneGradient,
        fit: ImageFit = COVER,
        grayscale: Boolean = false,
        jpegProgressive: Boolean = true,
        jpegQuality: Int,
        maxHeight: Int,
        maxWidth: Int,
        pngCompressionSpeed: Int = 4,
        pngQuality: Int,
        quality: Int,
        rotate: Int = 0,
        sizes: String = "",
        "A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]"
        srcSetBreakpoints: [Int] = [],
        toFormat: ImageFormat = AUTO,
        toFormatBase64: ImageFormat = AUTO,
        traceSVG: Potrace,
        trim: Float = 0.0,
        webpQuality: Int
    ): ImageSharpFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Options to pass to sharp when generating AVIF images."
        avifOptions: AVIFOptions,
        "Background color applied to the wrapper. Also passed to sharp to use as a background when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        "Options for the low-resolution placeholder image. Set placeholder to \"BLURRED\" to use this"
        blurredOptions: BlurredOptions,
        """

        Specifies the image widths to generate. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        """

        The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
        The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
        not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
        both PNG and JPG is not supported and will be ignored.
        """
        formats: [ImageFormat],
        """

        The display height of the generated image for layout = FIXED, and the maximum display height of the largest image for layout = CONSTRAINED.
        The image will be cropped if the aspect ratio does not match the source image. If omitted, it is calculated from the supplied width,
        matching the aspect ratio of the source image.
        """
        height: Int,
        "Options to pass to sharp when generating JPG images."
        jpgOptions: JPGOptions,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: ImageLayout = CONSTRAINED,
        """

        A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1, 2] for CONSTRAINED. In this case, an image with a constrained layout
        and width = 400 would generate images at 100, 200, 400 and 800px wide. Ignored for FULL_WIDTH images, which use breakpoints instead
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        TRACED_SVG: a low-resolution traced SVG of the image.
        NONE: no placeholder. Set "background" to use a fixed background color.
        """
        placeholder: ImagePlaceholder,
        "Options to pass to sharp when generating PNG images."
        pngOptions: PNGOptions,
        "The default quality. This is overridden by any format-specific options"
        quality: Int,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download.
        You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
        does not actually span the full width of the screen, in which case you should pass the correct size here.
        """
        sizes: String,
        "Options for traced placeholder SVGs. You also should set placeholder to \"TRACED_SVG\"."
        tracedSVGOptions: Potrace,
        "Options to pass to sharp to control cropping and other image manipulations."
        transformOptions: TransformOptions,
        "Options to pass to sharp when generating WebP images."
        webpOptions: WebPOptions,
        """

        The display width of the generated image for layout = FIXED, and the maximum display width of the largest image for layout = CONSTRAINED.
        Ignored if layout = FLUID.
        """
        width: Int
    ): GatsbyImageData!
    id: ID!
    internal: Internal!
    original: ImageSharpOriginal
    parent: Node
    resize(background: String = "rgba(0,0,0,1)", base64: Boolean = false, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = AUTO, traceSVG: Potrace, trim: Float = 0.0, webpQuality: Int, width: Int): ImageSharpResize
}

type ImageSharpConnection {
    distinct(field: ImageSharpFieldsEnum!): [String!]!
    edges: [ImageSharpEdge!]!
    group(field: ImageSharpFieldsEnum!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
    max(field: ImageSharpFieldsEnum!): Float
    min(field: ImageSharpFieldsEnum!): Float
    nodes: [ImageSharp!]!
    pageInfo: PageInfo!
    sum(field: ImageSharpFieldsEnum!): Float
    totalCount: Int!
}

type ImageSharpEdge {
    next: ImageSharp
    node: ImageSharp!
    previous: ImageSharp
}

type ImageSharpFixed {
    aspectRatio: Float
    base64: String
    height: Float!
    originalName: String
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
    width: Float!
}

type ImageSharpFluid {
    aspectRatio: Float!
    base64: String
    originalImg: String
    originalName: String
    presentationHeight: Int!
    presentationWidth: Int!
    sizes: String!
    src: String!
    srcSet: String!
    srcSetWebp: String
    srcWebp: String
    tracedSVG: String
}

type ImageSharpGroupConnection {
    distinct(field: ImageSharpFieldsEnum!): [String!]!
    edges: [ImageSharpEdge!]!
    field: String!
    fieldValue: String
    group(field: ImageSharpFieldsEnum!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
    max(field: ImageSharpFieldsEnum!): Float
    min(field: ImageSharpFieldsEnum!): Float
    nodes: [ImageSharp!]!
    pageInfo: PageInfo!
    sum(field: ImageSharpFieldsEnum!): Float
    totalCount: Int!
}

type ImageSharpOriginal {
    height: Float
    src: String
    width: Float
}

type ImageSharpResize {
    aspectRatio: Float
    height: Int
    originalName: String
    src: String
    tracedSVG: String
    width: Int
}

type ImgixFixed {
    base64: String!
    height: Int!
    sizes: String!
    src: String!
    srcSet: String!
    srcSetWebp: String!
    srcWebp: String!
    width: Int!
}

type ImgixFluid {
    aspectRatio: Float!
    base64: String!
    sizes: String!
    src: String!
    srcSet: String!
    srcSetWebp: String!
    srcWebp: String!
}

type Internal {
    content: String
    contentDigest: String!
    contentFilePath: String
    description: String
    fieldOwners: [String]
    ignoreType: Boolean
    mediaType: String
    owner: String!
    type: String!
}

type PageInfo {
    currentPage: Int!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    itemCount: Int!
    pageCount: Int!
    perPage: Int
    totalCount: Int!
}

type PrismicAlternateLanguageType {
    document: PrismicAllDocumentTypes
    id: ID
    lang: String
    raw: JSON
    type: String
    uid: String
}

type PrismicCaseStudies implements Node {
    _previewable: ID!
    alternate_languages: [PrismicAlternateLanguageType!]!
    children: [Node!]!
    data: PrismicCaseStudiesDataType!
    dataRaw: JSON!
    first_publication_date(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    gatsbyPath(filePath: String): String
    href: String!
    id: ID!
    internal: Internal!
    lang: String!
    last_publication_date(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    parent: Node
    prismicId: ID!
    tags: [String!]!
    type: String!
    uid: String!
    url: String
}

type PrismicCaseStudiesConnection {
    distinct(field: PrismicCaseStudiesFieldsEnum!): [String!]!
    edges: [PrismicCaseStudiesEdge!]!
    group(field: PrismicCaseStudiesFieldsEnum!, limit: Int, skip: Int): [PrismicCaseStudiesGroupConnection!]!
    max(field: PrismicCaseStudiesFieldsEnum!): Float
    min(field: PrismicCaseStudiesFieldsEnum!): Float
    nodes: [PrismicCaseStudies!]!
    pageInfo: PageInfo!
    sum(field: PrismicCaseStudiesFieldsEnum!): Float
    totalCount: Int!
}

type PrismicCaseStudiesDataBodyBanner implements PrismicSliceType {
    id: ID!
    items: [PrismicCaseStudiesDataBodyBannerItem!]!
    primary: PrismicCaseStudiesDataBodyBannerPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicCaseStudiesDataBodyBannerItem {
    button_link: PrismicLinkType
    button_text: String
    colour: String
}

type PrismicCaseStudiesDataBodyBannerPrimary {
    content: PrismicStructuredTextType
    spacing: String
    title: PrismicStructuredTextType
}

type PrismicCaseStudiesDataBodyCards implements PrismicSliceType {
    id: ID!
    items: [PrismicCaseStudiesDataBodyCardsItem!]!
    primary: PrismicCaseStudiesDataBodyCardsPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicCaseStudiesDataBodyCardsItem {
    card_content: PrismicStructuredTextType
    card_image: PrismicCaseStudiesDataBodyCardsItemsCardImageImageType
    card_title: PrismicStructuredTextType
    link: PrismicLinkType
}

type PrismicCaseStudiesDataBodyCardsItemsCardImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicCaseStudiesDataBodyCardsPrimary {
    button_link_1: PrismicLinkType
    button_link_2: PrismicLinkType
    button_text_1: String
    button_text_2: String
    section_title: PrismicStructuredTextType
    spacing: String
}

type PrismicCaseStudiesDataBodyContactForm implements PrismicSliceType {
    id: ID!
    primary: PrismicCaseStudiesDataBodyContactFormPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicCaseStudiesDataBodyContactFormPrimary {
    content: PrismicStructuredTextType
    enquiry_title: String
    spacing: String
}

type PrismicCaseStudiesDataBodyContentBlock implements PrismicSliceType {
    id: ID!
    items: [PrismicCaseStudiesDataBodyContentBlockItem!]!
    primary: PrismicCaseStudiesDataBodyContentBlockPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicCaseStudiesDataBodyContentBlockItem {
    button_link: PrismicLinkType
    button_text: String
    colour: String
}

type PrismicCaseStudiesDataBodyContentBlockPrimary {
    align: String
    content: PrismicStructuredTextType
    has_background: Boolean
    spacing: String
}

type PrismicCaseStudiesDataBodyFaqs implements PrismicSliceType {
    id: ID!
    items: [PrismicCaseStudiesDataBodyFaqsItem!]!
    primary: PrismicCaseStudiesDataBodyFaqsPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicCaseStudiesDataBodyFaqsItem {
    answer: PrismicStructuredTextType
    question: String
}

type PrismicCaseStudiesDataBodyFaqsPrimary {
    content: PrismicStructuredTextType
    spacing: String
}

type PrismicCaseStudiesDataBodyFeature implements PrismicSliceType {
    id: ID!
    items: [PrismicCaseStudiesDataBodyFeatureItem!]!
    primary: PrismicCaseStudiesDataBodyFeaturePrimary!
    slice_label: String
    slice_type: String!
}

type PrismicCaseStudiesDataBodyFeatureItem {
    button_link: PrismicLinkType
    button_text: String
    colour: String
}

type PrismicCaseStudiesDataBodyFeaturePrimary {
    content: PrismicStructuredTextType
    image: PrismicCaseStudiesDataBodyFeaturePrimaryImageImageType
    is_image_right: Boolean
    spacing: String
}

type PrismicCaseStudiesDataBodyFeaturePrimaryImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicCaseStudiesDataBodyFeatureSlider implements PrismicSliceType {
    id: ID!
    items: [PrismicCaseStudiesDataBodyFeatureSliderItem!]!
    primary: PrismicCaseStudiesDataBodyFeatureSliderPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicCaseStudiesDataBodyFeatureSliderItem {
    image: PrismicCaseStudiesDataBodyFeatureSliderItemsImageImageType
    title: String
}

type PrismicCaseStudiesDataBodyFeatureSliderItemsImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicCaseStudiesDataBodyFeatureSliderPrimary {
    button_link: PrismicLinkType
    button_text: String
    content: PrismicStructuredTextType
    dark_background: Boolean
    is_image_right: Boolean
    label: String
    spacing: String
}

type PrismicCaseStudiesDataBodyFullHero implements PrismicSliceType {
    id: ID!
    items: [PrismicCaseStudiesDataBodyFullHeroItem!]!
    primary: PrismicCaseStudiesDataBodyFullHeroPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicCaseStudiesDataBodyFullHeroItem {
    button_link: PrismicLinkType
    button_text: String
}

type PrismicCaseStudiesDataBodyFullHeroPrimary {
    hero_content: PrismicStructuredTextType
    hero_image: PrismicCaseStudiesDataBodyFullHeroPrimaryHeroImageImageType
    hero_title: PrismicStructuredTextType
    spacing: String
}

type PrismicCaseStudiesDataBodyFullHeroPrimaryHeroImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicCaseStudiesDataBodyGallery implements PrismicSliceType {
    id: ID!
    items: [PrismicCaseStudiesDataBodyGalleryItem!]!
    primary: PrismicCaseStudiesDataBodyGalleryPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicCaseStudiesDataBodyGalleryItem {
    caption: PrismicStructuredTextType
    image: PrismicCaseStudiesDataBodyGalleryItemsImageImageType
    title: String
}

type PrismicCaseStudiesDataBodyGalleryItemsImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicCaseStudiesDataBodyGalleryPrimary {
    content: PrismicStructuredTextType
    spacing: String
}

type PrismicCaseStudiesDataBodyGridCards implements PrismicSliceType {
    id: ID!
    items: [PrismicCaseStudiesDataBodyGridCardsItem!]!
    primary: PrismicCaseStudiesDataBodyGridCardsPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicCaseStudiesDataBodyGridCardsItem {
    card_content: PrismicStructuredTextType
    card_image: PrismicCaseStudiesDataBodyGridCardsItemsCardImageImageType
}

type PrismicCaseStudiesDataBodyGridCardsItemsCardImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicCaseStudiesDataBodyGridCardsPrimary {
    spacing: String
}

type PrismicCaseStudiesDataBodyImageBlock implements PrismicSliceType {
    id: ID!
    items: [PrismicCaseStudiesDataBodyImageBlockItem!]!
    primary: PrismicCaseStudiesDataBodyImageBlockPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicCaseStudiesDataBodyImageBlockItem {
    button_link: PrismicLinkType
    button_text: String
    colour: String
}

type PrismicCaseStudiesDataBodyImageBlockPrimary {
    content: PrismicStructuredTextType
    image: PrismicCaseStudiesDataBodyImageBlockPrimaryImageImageType
    spacing: String
}

type PrismicCaseStudiesDataBodyImageBlockPrimaryImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicCaseStudiesDataBodyIntroductionContent implements PrismicSliceType {
    id: ID!
    primary: PrismicCaseStudiesDataBodyIntroductionContentPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicCaseStudiesDataBodyIntroductionContentPrimary {
    content: PrismicStructuredTextType
    spacing: String
    title: PrismicStructuredTextType
}

type PrismicCaseStudiesDataBodyShowroom implements PrismicSliceType {
    id: ID!
    items: [PrismicCaseStudiesDataBodyShowroomItem!]!
    primary: PrismicCaseStudiesDataBodyShowroomPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicCaseStudiesDataBodyShowroomItem {
    showroom: PrismicLinkType
}

type PrismicCaseStudiesDataBodyShowroomPrimary {
    spacing: String
    title: PrismicStructuredTextType
}

type PrismicCaseStudiesDataBodySpacer implements PrismicSliceType {
    id: ID!
    primary: PrismicCaseStudiesDataBodySpacerPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicCaseStudiesDataBodySpacerPrimary {
    x_axis: String
    y_axis: String
}

type PrismicCaseStudiesDataBodyTwoColumnContent implements PrismicSliceType {
    id: ID!
    items: [PrismicCaseStudiesDataBodyTwoColumnContentItem!]!
    primary: PrismicCaseStudiesDataBodyTwoColumnContentPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicCaseStudiesDataBodyTwoColumnContentItem {
    content: PrismicStructuredTextType
}

type PrismicCaseStudiesDataBodyTwoColumnContentPrimary {
    spacing: String
}

type PrismicCaseStudiesDataBodyVideoBlock implements PrismicSliceType {
    id: ID!
    items: [PrismicCaseStudiesDataBodyVideoBlockItem!]!
    primary: PrismicCaseStudiesDataBodyVideoBlockPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicCaseStudiesDataBodyVideoBlockItem {
    button_link: PrismicLinkType
    button_text: String
    colour: String
}

type PrismicCaseStudiesDataBodyVideoBlockPrimary {
    content: PrismicStructuredTextType
    image: PrismicCaseStudiesDataBodyVideoBlockPrimaryImageImageType
    spacing: String
    video_embed: PrismicEmbedType
}

type PrismicCaseStudiesDataBodyVideoBlockPrimaryImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicCaseStudiesDataType {
    body: [PrismicCaseStudiesDataBodySlicesType!]!
    meta_description: String
    meta_title: String
}

type PrismicCaseStudiesEdge {
    next: PrismicCaseStudies
    node: PrismicCaseStudies!
    previous: PrismicCaseStudies
}

type PrismicCaseStudiesGroupConnection {
    distinct(field: PrismicCaseStudiesFieldsEnum!): [String!]!
    edges: [PrismicCaseStudiesEdge!]!
    field: String!
    fieldValue: String
    group(field: PrismicCaseStudiesFieldsEnum!, limit: Int, skip: Int): [PrismicCaseStudiesGroupConnection!]!
    max(field: PrismicCaseStudiesFieldsEnum!): Float
    min(field: PrismicCaseStudiesFieldsEnum!): Float
    nodes: [PrismicCaseStudies!]!
    pageInfo: PageInfo!
    sum(field: PrismicCaseStudiesFieldsEnum!): Float
    totalCount: Int!
}

type PrismicEmbedType implements Node {
    author_name: String
    author_url: String
    children: [Node!]!
    embed_url: String
    height: Int
    html: String
    id: ID!
    internal: Internal!
    parent: Node
    prismicId: String
    provider_name: String
    provider_url: String
    thumbnail_height: Int
    thumbnail_url: String
    thumbnail_width: Int
    title: String
    type: String
    version: String
    width: Int
}

type PrismicEmbedTypeConnection {
    distinct(field: PrismicEmbedTypeFieldsEnum!): [String!]!
    edges: [PrismicEmbedTypeEdge!]!
    group(field: PrismicEmbedTypeFieldsEnum!, limit: Int, skip: Int): [PrismicEmbedTypeGroupConnection!]!
    max(field: PrismicEmbedTypeFieldsEnum!): Float
    min(field: PrismicEmbedTypeFieldsEnum!): Float
    nodes: [PrismicEmbedType!]!
    pageInfo: PageInfo!
    sum(field: PrismicEmbedTypeFieldsEnum!): Float
    totalCount: Int!
}

type PrismicEmbedTypeEdge {
    next: PrismicEmbedType
    node: PrismicEmbedType!
    previous: PrismicEmbedType
}

type PrismicEmbedTypeGroupConnection {
    distinct(field: PrismicEmbedTypeFieldsEnum!): [String!]!
    edges: [PrismicEmbedTypeEdge!]!
    field: String!
    fieldValue: String
    group(field: PrismicEmbedTypeFieldsEnum!, limit: Int, skip: Int): [PrismicEmbedTypeGroupConnection!]!
    max(field: PrismicEmbedTypeFieldsEnum!): Float
    min(field: PrismicEmbedTypeFieldsEnum!): Float
    nodes: [PrismicEmbedType!]!
    pageInfo: PageInfo!
    sum(field: PrismicEmbedTypeFieldsEnum!): Float
    totalCount: Int!
}

type PrismicGeoPointType {
    latitude: Float!
    longitude: Float!
}

type PrismicHomepage implements Node {
    _previewable: ID!
    alternate_languages: [PrismicAlternateLanguageType!]!
    children: [Node!]!
    data: PrismicHomepageDataType!
    dataRaw: JSON!
    first_publication_date(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    href: String!
    id: ID!
    internal: Internal!
    lang: String!
    last_publication_date(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    parent: Node
    prismicId: ID!
    tags: [String!]!
    type: String!
    url: String
}

type PrismicHomepageConnection {
    distinct(field: PrismicHomepageFieldsEnum!): [String!]!
    edges: [PrismicHomepageEdge!]!
    group(field: PrismicHomepageFieldsEnum!, limit: Int, skip: Int): [PrismicHomepageGroupConnection!]!
    max(field: PrismicHomepageFieldsEnum!): Float
    min(field: PrismicHomepageFieldsEnum!): Float
    nodes: [PrismicHomepage!]!
    pageInfo: PageInfo!
    sum(field: PrismicHomepageFieldsEnum!): Float
    totalCount: Int!
}

type PrismicHomepageDataBodyBanner implements PrismicSliceType {
    id: ID!
    items: [PrismicHomepageDataBodyBannerItem!]!
    primary: PrismicHomepageDataBodyBannerPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicHomepageDataBodyBannerItem {
    button_link: PrismicLinkType
    button_text: String
    colour: String
}

type PrismicHomepageDataBodyBannerPrimary {
    content: PrismicStructuredTextType
    spacing: String
    title: PrismicStructuredTextType
}

type PrismicHomepageDataBodyCards implements PrismicSliceType {
    id: ID!
    items: [PrismicHomepageDataBodyCardsItem!]!
    primary: PrismicHomepageDataBodyCardsPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicHomepageDataBodyCardsItem {
    card_content: PrismicStructuredTextType
    card_image: PrismicHomepageDataBodyCardsItemsCardImageImageType
    card_title: PrismicStructuredTextType
    link: PrismicLinkType
}

type PrismicHomepageDataBodyCardsItemsCardImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicHomepageDataBodyCardsPrimary {
    button_link_1: PrismicLinkType
    button_link_2: PrismicLinkType
    button_text_1: String
    button_text_2: String
    section_title: PrismicStructuredTextType
    spacing: String
}

type PrismicHomepageDataBodyContactForm implements PrismicSliceType {
    id: ID!
    primary: PrismicHomepageDataBodyContactFormPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicHomepageDataBodyContactFormPrimary {
    content: PrismicStructuredTextType
    enquiry_title: String
    spacing: String
}

type PrismicHomepageDataBodyContentBlock implements PrismicSliceType {
    id: ID!
    items: [PrismicHomepageDataBodyContentBlockItem!]!
    primary: PrismicHomepageDataBodyContentBlockPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicHomepageDataBodyContentBlockItem {
    button_link: PrismicLinkType
    button_text: String
    colour: String
}

type PrismicHomepageDataBodyContentBlockPrimary {
    align: String
    content: PrismicStructuredTextType
    has_background: Boolean
    spacing: String
}

type PrismicHomepageDataBodyFaqs implements PrismicSliceType {
    id: ID!
    items: [PrismicHomepageDataBodyFaqsItem!]!
    primary: PrismicHomepageDataBodyFaqsPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicHomepageDataBodyFaqsItem {
    answer: PrismicStructuredTextType
    question: String
}

type PrismicHomepageDataBodyFaqsPrimary {
    content: PrismicStructuredTextType
    spacing: String
}

type PrismicHomepageDataBodyFeature implements PrismicSliceType {
    id: ID!
    items: [PrismicHomepageDataBodyFeatureItem!]!
    primary: PrismicHomepageDataBodyFeaturePrimary!
    slice_label: String
    slice_type: String!
}

type PrismicHomepageDataBodyFeatureItem {
    button_link: PrismicLinkType
    button_text: String
    colour: String
}

type PrismicHomepageDataBodyFeaturePrimary {
    content: PrismicStructuredTextType
    image: PrismicHomepageDataBodyFeaturePrimaryImageImageType
    is_image_right: Boolean
    spacing: String
}

type PrismicHomepageDataBodyFeaturePrimaryImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicHomepageDataBodyFeatureSlider implements PrismicSliceType {
    id: ID!
    items: [PrismicHomepageDataBodyFeatureSliderItem!]!
    primary: PrismicHomepageDataBodyFeatureSliderPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicHomepageDataBodyFeatureSliderItem {
    image: PrismicHomepageDataBodyFeatureSliderItemsImageImageType
    title: String
}

type PrismicHomepageDataBodyFeatureSliderItemsImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicHomepageDataBodyFeatureSliderPrimary {
    button_link: PrismicLinkType
    button_text: String
    content: PrismicStructuredTextType
    dark_background: Boolean
    is_image_right: Boolean
    label: String
    spacing: String
}

type PrismicHomepageDataBodyFullHero implements PrismicSliceType {
    id: ID!
    items: [PrismicHomepageDataBodyFullHeroItem!]!
    primary: PrismicHomepageDataBodyFullHeroPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicHomepageDataBodyFullHeroItem {
    button_link: PrismicLinkType
    button_text: String
}

type PrismicHomepageDataBodyFullHeroPrimary {
    hero_content: PrismicStructuredTextType
    hero_image: PrismicHomepageDataBodyFullHeroPrimaryHeroImageImageType
    hero_title: PrismicStructuredTextType
    spacing: String
}

type PrismicHomepageDataBodyFullHeroPrimaryHeroImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicHomepageDataBodyGallery implements PrismicSliceType {
    id: ID!
    items: [PrismicHomepageDataBodyGalleryItem!]!
    primary: PrismicHomepageDataBodyGalleryPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicHomepageDataBodyGalleryItem {
    caption: PrismicStructuredTextType
    image: PrismicHomepageDataBodyGalleryItemsImageImageType
    title: String
}

type PrismicHomepageDataBodyGalleryItemsImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicHomepageDataBodyGalleryPrimary {
    content: PrismicStructuredTextType
    spacing: String
}

type PrismicHomepageDataBodyGridCards implements PrismicSliceType {
    id: ID!
    items: [PrismicHomepageDataBodyGridCardsItem!]!
    primary: PrismicHomepageDataBodyGridCardsPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicHomepageDataBodyGridCardsItem {
    card_content: PrismicStructuredTextType
    card_image: PrismicHomepageDataBodyGridCardsItemsCardImageImageType
}

type PrismicHomepageDataBodyGridCardsItemsCardImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicHomepageDataBodyGridCardsPrimary {
    spacing: String
}

type PrismicHomepageDataBodyImageBlock implements PrismicSliceType {
    id: ID!
    items: [PrismicHomepageDataBodyImageBlockItem!]!
    primary: PrismicHomepageDataBodyImageBlockPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicHomepageDataBodyImageBlockItem {
    button_link: PrismicLinkType
    button_text: String
    colour: String
}

type PrismicHomepageDataBodyImageBlockPrimary {
    content: PrismicStructuredTextType
    image: PrismicHomepageDataBodyImageBlockPrimaryImageImageType
    spacing: String
}

type PrismicHomepageDataBodyImageBlockPrimaryImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicHomepageDataBodyIntroductionContent implements PrismicSliceType {
    id: ID!
    primary: PrismicHomepageDataBodyIntroductionContentPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicHomepageDataBodyIntroductionContentPrimary {
    add_service_icons: Boolean
    content: PrismicStructuredTextType
    spacing: String
    title: PrismicStructuredTextType
}

type PrismicHomepageDataBodyShowroom implements PrismicSliceType {
    id: ID!
    items: [PrismicHomepageDataBodyShowroomItem!]!
    primary: PrismicHomepageDataBodyShowroomPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicHomepageDataBodyShowroomItem {
    showroom: PrismicLinkType
}

type PrismicHomepageDataBodyShowroomPrimary {
    spacing: String
    title: PrismicStructuredTextType
}

type PrismicHomepageDataBodySpacer implements PrismicSliceType {
    id: ID!
    primary: PrismicHomepageDataBodySpacerPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicHomepageDataBodySpacerPrimary {
    x_axis: String
    y_axis: String
}

type PrismicHomepageDataBodyTwoColumnContent implements PrismicSliceType {
    id: ID!
    items: [PrismicHomepageDataBodyTwoColumnContentItem!]!
    primary: PrismicHomepageDataBodyTwoColumnContentPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicHomepageDataBodyTwoColumnContentItem {
    content: PrismicStructuredTextType
}

type PrismicHomepageDataBodyTwoColumnContentPrimary {
    spacing: String
}

type PrismicHomepageDataBodyVideoBlock implements PrismicSliceType {
    id: ID!
    items: [PrismicHomepageDataBodyVideoBlockItem!]!
    primary: PrismicHomepageDataBodyVideoBlockPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicHomepageDataBodyVideoBlockItem {
    button_link: PrismicLinkType
    button_text: String
    colour: String
}

type PrismicHomepageDataBodyVideoBlockPrimary {
    content: PrismicStructuredTextType
    image: PrismicHomepageDataBodyVideoBlockPrimaryImageImageType
    spacing: String
    video_embed: PrismicEmbedType
}

type PrismicHomepageDataBodyVideoBlockPrimaryImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicHomepageDataType {
    body: [PrismicHomepageDataBodySlicesType!]!
    meta_description: String
    meta_title: String
}

type PrismicHomepageEdge {
    next: PrismicHomepage
    node: PrismicHomepage!
    previous: PrismicHomepage
}

type PrismicHomepageGroupConnection {
    distinct(field: PrismicHomepageFieldsEnum!): [String!]!
    edges: [PrismicHomepageEdge!]!
    field: String!
    fieldValue: String
    group(field: PrismicHomepageFieldsEnum!, limit: Int, skip: Int): [PrismicHomepageGroupConnection!]!
    max(field: PrismicHomepageFieldsEnum!): Float
    min(field: PrismicHomepageFieldsEnum!): Float
    nodes: [PrismicHomepage!]!
    pageInfo: PageInfo!
    sum(field: PrismicHomepageFieldsEnum!): Float
    totalCount: Int!
}

type PrismicImageDimensionsType {
    height: Int!
    width: Int!
}

type PrismicImageThumbnailType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicLinkType {
    document: PrismicAllDocumentTypes
    id: ID
    isBroken: Boolean
    lang: String
    link_type: PrismicLinkTypeEnum
    localFile: File
    raw: JSON
    size: Int
    slug: String
    tags: [String]
    target: String
    type: String
    uid: String
    url: String
}

type PrismicPage implements Node {
    _previewable: ID!
    alternate_languages: [PrismicAlternateLanguageType!]!
    children: [Node!]!
    data: PrismicPageDataType!
    dataRaw: JSON!
    first_publication_date(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    gatsbyPath(filePath: String): String
    href: String!
    id: ID!
    internal: Internal!
    lang: String!
    last_publication_date(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    parent: Node
    prismicId: ID!
    tags: [String!]!
    type: String!
    uid: String!
    url: String
}

type PrismicPageConnection {
    distinct(field: PrismicPageFieldsEnum!): [String!]!
    edges: [PrismicPageEdge!]!
    group(field: PrismicPageFieldsEnum!, limit: Int, skip: Int): [PrismicPageGroupConnection!]!
    max(field: PrismicPageFieldsEnum!): Float
    min(field: PrismicPageFieldsEnum!): Float
    nodes: [PrismicPage!]!
    pageInfo: PageInfo!
    sum(field: PrismicPageFieldsEnum!): Float
    totalCount: Int!
}

type PrismicPageDataBodyBanner implements PrismicSliceType {
    id: ID!
    items: [PrismicPageDataBodyBannerItem!]!
    primary: PrismicPageDataBodyBannerPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicPageDataBodyBannerItem {
    button_link: PrismicLinkType
    button_text: String
    colour: String
}

type PrismicPageDataBodyBannerPrimary {
    content: PrismicStructuredTextType
    spacing: String
    title: PrismicStructuredTextType
}

type PrismicPageDataBodyCards implements PrismicSliceType {
    id: ID!
    items: [PrismicPageDataBodyCardsItem!]!
    primary: PrismicPageDataBodyCardsPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicPageDataBodyCardsItem {
    card_content: PrismicStructuredTextType
    card_image: PrismicPageDataBodyCardsItemsCardImageImageType
    card_title: PrismicStructuredTextType
    link: PrismicLinkType
}

type PrismicPageDataBodyCardsItemsCardImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicPageDataBodyCardsPrimary {
    button_link_1: PrismicLinkType
    button_link_2: PrismicLinkType
    button_text_1: String
    button_text_2: String
    section_title: PrismicStructuredTextType
    spacing: String
}

type PrismicPageDataBodyContactForm implements PrismicSliceType {
    id: ID!
    primary: PrismicPageDataBodyContactFormPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicPageDataBodyContactFormPrimary {
    content: PrismicStructuredTextType
    enquiry_title: String
    spacing: String
}

type PrismicPageDataBodyContentBlock implements PrismicSliceType {
    id: ID!
    items: [PrismicPageDataBodyContentBlockItem!]!
    primary: PrismicPageDataBodyContentBlockPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicPageDataBodyContentBlockItem {
    button_link: PrismicLinkType
    button_text: String
    colour: String
}

type PrismicPageDataBodyContentBlockPrimary {
    align: String
    content: PrismicStructuredTextType
    has_background: Boolean
    spacing: String
}

type PrismicPageDataBodyFaqs implements PrismicSliceType {
    id: ID!
    items: [PrismicPageDataBodyFaqsItem!]!
    primary: PrismicPageDataBodyFaqsPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicPageDataBodyFaqsItem {
    answer: PrismicStructuredTextType
    question: String
}

type PrismicPageDataBodyFaqsPrimary {
    content: PrismicStructuredTextType
    spacing: String
}

type PrismicPageDataBodyFeature implements PrismicSliceType {
    id: ID!
    items: [PrismicPageDataBodyFeatureItem!]!
    primary: PrismicPageDataBodyFeaturePrimary!
    slice_label: String
    slice_type: String!
}

type PrismicPageDataBodyFeatureItem {
    button_link: PrismicLinkType
    button_text: String
    colour: String
}

type PrismicPageDataBodyFeaturePrimary {
    content: PrismicStructuredTextType
    image: PrismicPageDataBodyFeaturePrimaryImageImageType
    is_image_right: Boolean
    spacing: String
}

type PrismicPageDataBodyFeaturePrimaryImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicPageDataBodyFeatureSlider implements PrismicSliceType {
    id: ID!
    items: [PrismicPageDataBodyFeatureSliderItem!]!
    primary: PrismicPageDataBodyFeatureSliderPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicPageDataBodyFeatureSliderItem {
    image: PrismicPageDataBodyFeatureSliderItemsImageImageType
    title: String
}

type PrismicPageDataBodyFeatureSliderItemsImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicPageDataBodyFeatureSliderPrimary {
    button_link: PrismicLinkType
    button_text: String
    content: PrismicStructuredTextType
    dark_background: Boolean
    is_image_right: Boolean
    label: String
    spacing: String
}

type PrismicPageDataBodyFullHero implements PrismicSliceType {
    id: ID!
    items: [PrismicPageDataBodyFullHeroItem!]!
    primary: PrismicPageDataBodyFullHeroPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicPageDataBodyFullHeroItem {
    button_link: PrismicLinkType
    button_text: String
}

type PrismicPageDataBodyFullHeroPrimary {
    hero_content: PrismicStructuredTextType
    hero_image: PrismicPageDataBodyFullHeroPrimaryHeroImageImageType
    hero_title: PrismicStructuredTextType
    spacing: String
}

type PrismicPageDataBodyFullHeroPrimaryHeroImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicPageDataBodyGallery implements PrismicSliceType {
    id: ID!
    items: [PrismicPageDataBodyGalleryItem!]!
    primary: PrismicPageDataBodyGalleryPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicPageDataBodyGalleryItem {
    caption: PrismicStructuredTextType
    image: PrismicPageDataBodyGalleryItemsImageImageType
    title: String
}

type PrismicPageDataBodyGalleryItemsImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicPageDataBodyGalleryPrimary {
    content: PrismicStructuredTextType
    spacing: String
}

type PrismicPageDataBodyGridCards implements PrismicSliceType {
    id: ID!
    items: [PrismicPageDataBodyGridCardsItem!]!
    primary: PrismicPageDataBodyGridCardsPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicPageDataBodyGridCardsItem {
    card_content: PrismicStructuredTextType
    card_image: PrismicPageDataBodyGridCardsItemsCardImageImageType
}

type PrismicPageDataBodyGridCardsItemsCardImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicPageDataBodyGridCardsPrimary {
    spacing: String
}

type PrismicPageDataBodyImageBlock implements PrismicSliceType {
    id: ID!
    items: [PrismicPageDataBodyImageBlockItem!]!
    primary: PrismicPageDataBodyImageBlockPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicPageDataBodyImageBlockItem {
    button_link: PrismicLinkType
    button_text: String
    colour: String
}

type PrismicPageDataBodyImageBlockPrimary {
    content: PrismicStructuredTextType
    image: PrismicPageDataBodyImageBlockPrimaryImageImageType
    spacing: String
}

type PrismicPageDataBodyImageBlockPrimaryImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicPageDataBodyIntroductionContent implements PrismicSliceType {
    id: ID!
    primary: PrismicPageDataBodyIntroductionContentPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicPageDataBodyIntroductionContentPrimary {
    content: PrismicStructuredTextType
    spacing: String
    title: PrismicStructuredTextType
}

type PrismicPageDataBodyShowroom implements PrismicSliceType {
    id: ID!
    items: [PrismicPageDataBodyShowroomItem!]!
    primary: PrismicPageDataBodyShowroomPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicPageDataBodyShowroomItem {
    showroom: PrismicLinkType
}

type PrismicPageDataBodyShowroomPrimary {
    spacing: String
    title: PrismicStructuredTextType
}

type PrismicPageDataBodySpacer implements PrismicSliceType {
    id: ID!
    primary: PrismicPageDataBodySpacerPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicPageDataBodySpacerPrimary {
    x_axis: String
    y_axis: String
}

type PrismicPageDataBodyTwoColumnContent implements PrismicSliceType {
    id: ID!
    items: [PrismicPageDataBodyTwoColumnContentItem!]!
    primary: PrismicPageDataBodyTwoColumnContentPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicPageDataBodyTwoColumnContentItem {
    content: PrismicStructuredTextType
}

type PrismicPageDataBodyTwoColumnContentPrimary {
    spacing: String
}

type PrismicPageDataBodyVideoBlock implements PrismicSliceType {
    id: ID!
    items: [PrismicPageDataBodyVideoBlockItem!]!
    primary: PrismicPageDataBodyVideoBlockPrimary!
    slice_label: String
    slice_type: String!
}

type PrismicPageDataBodyVideoBlockItem {
    button_link: PrismicLinkType
    button_text: String
    colour: String
}

type PrismicPageDataBodyVideoBlockPrimary {
    content: PrismicStructuredTextType
    image: PrismicPageDataBodyVideoBlockPrimaryImageImageType
    spacing: String
    video_embed: PrismicEmbedType
}

type PrismicPageDataBodyVideoBlockPrimaryImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicPageDataType {
    body: [PrismicPageDataBodySlicesType!]!
    meta_description: String
    meta_title: String
}

type PrismicPageEdge {
    next: PrismicPage
    node: PrismicPage!
    previous: PrismicPage
}

type PrismicPageGroupConnection {
    distinct(field: PrismicPageFieldsEnum!): [String!]!
    edges: [PrismicPageEdge!]!
    field: String!
    fieldValue: String
    group(field: PrismicPageFieldsEnum!, limit: Int, skip: Int): [PrismicPageGroupConnection!]!
    max(field: PrismicPageFieldsEnum!): Float
    min(field: PrismicPageFieldsEnum!): Float
    nodes: [PrismicPage!]!
    pageInfo: PageInfo!
    sum(field: PrismicPageFieldsEnum!): Float
    totalCount: Int!
}

type PrismicShowroom implements Node {
    _previewable: ID!
    alternate_languages: [PrismicAlternateLanguageType!]!
    children: [Node!]!
    data: PrismicShowroomDataType!
    dataRaw: JSON!
    first_publication_date(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    href: String!
    id: ID!
    internal: Internal!
    lang: String!
    last_publication_date(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    parent: Node
    prismicId: ID!
    tags: [String!]!
    type: String!
    url: String
}

type PrismicShowroomConnection {
    distinct(field: PrismicShowroomFieldsEnum!): [String!]!
    edges: [PrismicShowroomEdge!]!
    group(field: PrismicShowroomFieldsEnum!, limit: Int, skip: Int): [PrismicShowroomGroupConnection!]!
    max(field: PrismicShowroomFieldsEnum!): Float
    min(field: PrismicShowroomFieldsEnum!): Float
    nodes: [PrismicShowroom!]!
    pageInfo: PageInfo!
    sum(field: PrismicShowroomFieldsEnum!): Float
    totalCount: Int!
}

type PrismicShowroomDataInterests {
    interest_content: PrismicStructuredTextType
    interest_image: PrismicShowroomDataInterestsInterestImageImageType
    interest_title: PrismicStructuredTextType
    is_popup_right: Boolean
    learn_more_link: PrismicLinkType
    pin_color: String
    pin_icon: PrismicShowroomDataInterestsPinIconImageType
    x_axis_percent: Float
    y_axis_percent: Float
}

type PrismicShowroomDataInterestsInterestImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicShowroomDataInterestsPinIconImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicShowroomDataShowroomImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicShowroomDataType {
    interests: [PrismicShowroomDataInterests]
    showroom_image: PrismicShowroomDataShowroomImageImageType
    title: PrismicStructuredTextType
}

type PrismicShowroomEdge {
    next: PrismicShowroom
    node: PrismicShowroom!
    previous: PrismicShowroom
}

type PrismicShowroomGroupConnection {
    distinct(field: PrismicShowroomFieldsEnum!): [String!]!
    edges: [PrismicShowroomEdge!]!
    field: String!
    fieldValue: String
    group(field: PrismicShowroomFieldsEnum!, limit: Int, skip: Int): [PrismicShowroomGroupConnection!]!
    max(field: PrismicShowroomFieldsEnum!): Float
    min(field: PrismicShowroomFieldsEnum!): Float
    nodes: [PrismicShowroom!]!
    pageInfo: PageInfo!
    sum(field: PrismicShowroomFieldsEnum!): Float
    totalCount: Int!
}

type PrismicSiteData implements Node {
    _previewable: ID!
    alternate_languages: [PrismicAlternateLanguageType!]!
    children: [Node!]!
    data: PrismicSiteDataDataType!
    dataRaw: JSON!
    first_publication_date(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    href: String!
    id: ID!
    internal: Internal!
    lang: String!
    last_publication_date(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date!
    parent: Node
    prismicId: ID!
    tags: [String!]!
    type: String!
    url: String
}

type PrismicSiteDataConnection {
    distinct(field: PrismicSiteDataFieldsEnum!): [String!]!
    edges: [PrismicSiteDataEdge!]!
    group(field: PrismicSiteDataFieldsEnum!, limit: Int, skip: Int): [PrismicSiteDataGroupConnection!]!
    max(field: PrismicSiteDataFieldsEnum!): Float
    min(field: PrismicSiteDataFieldsEnum!): Float
    nodes: [PrismicSiteData!]!
    pageInfo: PageInfo!
    sum(field: PrismicSiteDataFieldsEnum!): Float
    totalCount: Int!
}

type PrismicSiteDataDataCertifications {
    image: PrismicSiteDataDataCertificationsImageImageType
    link: PrismicLinkType
}

type PrismicSiteDataDataCertificationsImageImageType {
    alt: String
    copyright: String
    dimensions: PrismicImageDimensionsType
    "Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are \"fixed\"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information."
    fixed(
        "The fixed image height to render, in px."
        height: Int,
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality."
        quality: Int,
        "The fixed image width to render, in px."
        width: Int = 8192
    ): ImgixFixed
    "Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information."
    fluid(
        "The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        imgixParams: ImgixParamsInput = {},
        "The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed."
        maxHeight: Int,
        "The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme."
        maxWidth: Int = 8192,
        "Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url"
        placeholderImgixParams: ImgixParamsInput = {},
        "A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure."
        srcSetBreakpoints: [Int]
    ): ImgixFluid
    gatsbyImageData(
        """

        If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
        If neither width or height is provided, height will be set based on the intrinsic width of the source image.
        """
        aspectRatio: Float,
        "Background color applied to the wrapper, or when \"letterboxing\" an image to another aspect ratio."
        backgroundColor: String,
        """

        Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
        based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
        It will never generate any images larger than the source.
        """
        breakpoints: [Int],
        "If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image."
        height: Int,
        """

        This argument is used to set parameters to instruct imgix to transform the image.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        imgixParams: ImgixParamsInput,
        """

        The layout for the image.
        FIXED: A static image sized, that does not resize according to the screen width
        FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
        CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
        """
        layout: GatsbyImageLayout,
        """

        A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
        Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
        """
        outputPixelDensities: [Float],
        """

        Format of generated placeholder image, displayed while the main image loads.
        BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
        DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
        NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
        """
        placeholder: ImgixPlaceholder,
        """

        This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters.

        All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
        """
        placeholderImgixParams: ImgixParamsInput,
        """

        The "sizes" property, passed to the img tag. This describes the display size of the image.
        This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
        container will be the full width of the screen. In these cases we will generate an appropriate value.
        """
        sizes: String,
        "This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service."
        srcSetMaxWidth: Int = 8192,
        "This argument determines the minimum srcset width that is generated. The default is 100px."
        srcSetMinWidth: Int = 100,
        """

        The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
        The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
        Ignored if layout = FLUID.
        """
        width: Int,
        """

        This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.

        By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
        """
        widthTolerance: Float = 0.08
    ): JSON
    localFile: File
    "A plain imgix URL with the URL and params applied."
    url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicSiteDataDataFeatureDropdownLinks {
    nav_link: PrismicLinkType
    nav_text: String
}

type PrismicSiteDataDataFooterNavigation {
    nav_link: PrismicLinkType
    nav_text: String
}

type PrismicSiteDataDataNavigation {
    nav_link: PrismicLinkType
    nav_text: String
}

type PrismicSiteDataDataSocial {
    social_icon: String
    social_link: PrismicLinkType
}

type PrismicSiteDataDataType {
    address: PrismicStructuredTextType
    address_map: PrismicGeoPointType
    certifications: [PrismicSiteDataDataCertifications]
    contact_form_content: PrismicStructuredTextType
    contact_form_enquiry_title: PrismicStructuredTextType
    cta_link: PrismicLinkType
    cta_text: String
    email: String
    feature_dropdown_links: [PrismicSiteDataDataFeatureDropdownLinks]
    footer_navigation: [PrismicSiteDataDataFooterNavigation]
    navigation: [PrismicSiteDataDataNavigation]
    phone_number: String
    social: [PrismicSiteDataDataSocial]
}

type PrismicSiteDataEdge {
    next: PrismicSiteData
    node: PrismicSiteData!
    previous: PrismicSiteData
}

type PrismicSiteDataGroupConnection {
    distinct(field: PrismicSiteDataFieldsEnum!): [String!]!
    edges: [PrismicSiteDataEdge!]!
    field: String!
    fieldValue: String
    group(field: PrismicSiteDataFieldsEnum!, limit: Int, skip: Int): [PrismicSiteDataGroupConnection!]!
    max(field: PrismicSiteDataFieldsEnum!): Float
    min(field: PrismicSiteDataFieldsEnum!): Float
    nodes: [PrismicSiteData!]!
    pageInfo: PageInfo!
    sum(field: PrismicSiteDataFieldsEnum!): Float
    totalCount: Int!
}

type PrismicStructuredTextType {
    html: String
    raw: PrismicStructuredText! @deprecated(reason: "This field has been renamed to `richText`. The `richText` field has the same value the `raw` field.")
    richText: PrismicStructuredText!
    text: String
}

type PrismicTypePathType implements Node {
    children: [Node!]!
    id: ID!
    internal: Internal!
    kind: String!
    parent: Node
    path: [String!]!
    type: String!
}

type PrismicTypePathTypeConnection {
    distinct(field: PrismicTypePathTypeFieldsEnum!): [String!]!
    edges: [PrismicTypePathTypeEdge!]!
    group(field: PrismicTypePathTypeFieldsEnum!, limit: Int, skip: Int): [PrismicTypePathTypeGroupConnection!]!
    max(field: PrismicTypePathTypeFieldsEnum!): Float
    min(field: PrismicTypePathTypeFieldsEnum!): Float
    nodes: [PrismicTypePathType!]!
    pageInfo: PageInfo!
    sum(field: PrismicTypePathTypeFieldsEnum!): Float
    totalCount: Int!
}

type PrismicTypePathTypeEdge {
    next: PrismicTypePathType
    node: PrismicTypePathType!
    previous: PrismicTypePathType
}

type PrismicTypePathTypeGroupConnection {
    distinct(field: PrismicTypePathTypeFieldsEnum!): [String!]!
    edges: [PrismicTypePathTypeEdge!]!
    field: String!
    fieldValue: String
    group(field: PrismicTypePathTypeFieldsEnum!, limit: Int, skip: Int): [PrismicTypePathTypeGroupConnection!]!
    max(field: PrismicTypePathTypeFieldsEnum!): Float
    min(field: PrismicTypePathTypeFieldsEnum!): Float
    nodes: [PrismicTypePathType!]!
    pageInfo: PageInfo!
    sum(field: PrismicTypePathTypeFieldsEnum!): Float
    totalCount: Int!
}

type Query {
    allDirectory(filter: DirectoryFilterInput, limit: Int, skip: Int, sort: DirectorySortInput): DirectoryConnection!
    allFile(filter: FileFilterInput, limit: Int, skip: Int, sort: FileSortInput): FileConnection!
    allImageSharp(filter: ImageSharpFilterInput, limit: Int, skip: Int, sort: ImageSharpSortInput): ImageSharpConnection!
    allPrismicCaseStudies(filter: PrismicCaseStudiesFilterInput, limit: Int, skip: Int, sort: PrismicCaseStudiesSortInput): PrismicCaseStudiesConnection!
    allPrismicEmbedType(filter: PrismicEmbedTypeFilterInput, limit: Int, skip: Int, sort: PrismicEmbedTypeSortInput): PrismicEmbedTypeConnection!
    allPrismicHomepage(filter: PrismicHomepageFilterInput, limit: Int, skip: Int, sort: PrismicHomepageSortInput): PrismicHomepageConnection!
    allPrismicPage(filter: PrismicPageFilterInput, limit: Int, skip: Int, sort: PrismicPageSortInput): PrismicPageConnection!
    allPrismicShowroom(filter: PrismicShowroomFilterInput, limit: Int, skip: Int, sort: PrismicShowroomSortInput): PrismicShowroomConnection!
    allPrismicSiteData(filter: PrismicSiteDataFilterInput, limit: Int, skip: Int, sort: PrismicSiteDataSortInput): PrismicSiteDataConnection!
    allPrismicTypePathType(filter: PrismicTypePathTypeFilterInput, limit: Int, skip: Int, sort: PrismicTypePathTypeSortInput): PrismicTypePathTypeConnection!
    allSite(filter: SiteFilterInput, limit: Int, skip: Int, sort: SiteSortInput): SiteConnection!
    allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, limit: Int, skip: Int, sort: SiteBuildMetadataSortInput): SiteBuildMetadataConnection!
    allSiteFunction(filter: SiteFunctionFilterInput, limit: Int, skip: Int, sort: SiteFunctionSortInput): SiteFunctionConnection!
    allSitePage(filter: SitePageFilterInput, limit: Int, skip: Int, sort: SitePageSortInput): SitePageConnection!
    allSitePlugin(filter: SitePluginFilterInput, limit: Int, skip: Int, sort: SitePluginSortInput): SitePluginConnection!
    directory(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): Directory
    file(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, childImageSharp: ImageSharpFilterInput, children: NodeFilterListInput, childrenImageSharp: ImageSharpFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, publicURL: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput, url: StringQueryOperatorInput): File
    imageSharp(children: NodeFilterListInput, fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: GatsbyImageDataQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, original: ImageSharpOriginalFilterInput, parent: NodeFilterInput, resize: ImageSharpResizeFilterInput): ImageSharp
    prismicCaseStudies(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicCaseStudiesDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, gatsbyPath: StringQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicCaseStudies
    prismicEmbedType(author_name: StringQueryOperatorInput, author_url: StringQueryOperatorInput, children: NodeFilterListInput, embed_url: StringQueryOperatorInput, height: IntQueryOperatorInput, html: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput, prismicId: StringQueryOperatorInput, provider_name: StringQueryOperatorInput, provider_url: StringQueryOperatorInput, thumbnail_height: IntQueryOperatorInput, thumbnail_url: StringQueryOperatorInput, thumbnail_width: IntQueryOperatorInput, title: StringQueryOperatorInput, type: StringQueryOperatorInput, version: StringQueryOperatorInput, width: IntQueryOperatorInput): PrismicEmbedType
    prismicHomepage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicHomepageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicHomepage
    prismicPage(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicPageDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, gatsbyPath: StringQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicPage
    prismicShowroom(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicShowroomDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicShowroom
    prismicSiteData(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicSiteDataDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicSiteData
    prismicTypePathType(children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, kind: StringQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, type: StringQueryOperatorInput): PrismicTypePathType
    site(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, graphqlTypegen: BooleanQueryOperatorInput, host: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, jsxRuntime: StringQueryOperatorInput, parent: NodeFilterInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, port: IntQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput, trailingSlash: StringQueryOperatorInput): Site
    siteBuildMetadata(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): SiteBuildMetadata
    siteFunction(absoluteCompiledFilePath: StringQueryOperatorInput, children: NodeFilterListInput, functionRoute: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, matchPath: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, parent: NodeFilterInput, pluginName: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput): SiteFunction
    sitePage(children: NodeFilterListInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalComponentName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, pageContext: JSONQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, pluginCreator: SitePluginFilterInput): SitePage
    sitePlugin(browserAPIs: StringQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, packageJson: JSONQueryOperatorInput, parent: NodeFilterInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: JSONQueryOperatorInput, resolve: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, version: StringQueryOperatorInput): SitePlugin
}

type Site implements Node {
    buildTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    children: [Node!]!
    graphqlTypegen: Boolean
    host: String
    id: ID!
    internal: Internal!
    jsxRuntime: String
    parent: Node
    pathPrefix: String
    polyfill: Boolean
    port: Int
    siteMetadata: SiteSiteMetadata
    trailingSlash: String
}

type SiteBuildMetadata implements Node {
    buildTime(
        "Returns the difference between this date and the current time. Defaults to \"milliseconds\" but you can also pass in as the measurement \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", and \"seconds\"."
        difference: String,
        "Format the date using Moment.js' date tokens, e.g. `date(formatString: \"YYYY MMMM DD\")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens."
        formatString: String,
        "Returns a string generated with Moment.js' `fromNow` function"
        fromNow: Boolean,
        "Configures the locale Moment.js will use to format the date."
        locale: String
    ): Date
    children: [Node!]!
    id: ID!
    internal: Internal!
    parent: Node
}

type SiteBuildMetadataConnection {
    distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
    edges: [SiteBuildMetadataEdge!]!
    group(field: SiteBuildMetadataFieldsEnum!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
    max(field: SiteBuildMetadataFieldsEnum!): Float
    min(field: SiteBuildMetadataFieldsEnum!): Float
    nodes: [SiteBuildMetadata!]!
    pageInfo: PageInfo!
    sum(field: SiteBuildMetadataFieldsEnum!): Float
    totalCount: Int!
}

type SiteBuildMetadataEdge {
    next: SiteBuildMetadata
    node: SiteBuildMetadata!
    previous: SiteBuildMetadata
}

type SiteBuildMetadataGroupConnection {
    distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
    edges: [SiteBuildMetadataEdge!]!
    field: String!
    fieldValue: String
    group(field: SiteBuildMetadataFieldsEnum!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
    max(field: SiteBuildMetadataFieldsEnum!): Float
    min(field: SiteBuildMetadataFieldsEnum!): Float
    nodes: [SiteBuildMetadata!]!
    pageInfo: PageInfo!
    sum(field: SiteBuildMetadataFieldsEnum!): Float
    totalCount: Int!
}

type SiteConnection {
    distinct(field: SiteFieldsEnum!): [String!]!
    edges: [SiteEdge!]!
    group(field: SiteFieldsEnum!, limit: Int, skip: Int): [SiteGroupConnection!]!
    max(field: SiteFieldsEnum!): Float
    min(field: SiteFieldsEnum!): Float
    nodes: [Site!]!
    pageInfo: PageInfo!
    sum(field: SiteFieldsEnum!): Float
    totalCount: Int!
}

type SiteEdge {
    next: Site
    node: Site!
    previous: Site
}

type SiteFunction implements Node {
    absoluteCompiledFilePath: String!
    children: [Node!]!
    functionRoute: String!
    id: ID!
    internal: Internal!
    matchPath: String
    originalAbsoluteFilePath: String!
    originalRelativeFilePath: String!
    parent: Node
    pluginName: String!
    relativeCompiledFilePath: String!
}

type SiteFunctionConnection {
    distinct(field: SiteFunctionFieldsEnum!): [String!]!
    edges: [SiteFunctionEdge!]!
    group(field: SiteFunctionFieldsEnum!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
    max(field: SiteFunctionFieldsEnum!): Float
    min(field: SiteFunctionFieldsEnum!): Float
    nodes: [SiteFunction!]!
    pageInfo: PageInfo!
    sum(field: SiteFunctionFieldsEnum!): Float
    totalCount: Int!
}

type SiteFunctionEdge {
    next: SiteFunction
    node: SiteFunction!
    previous: SiteFunction
}

type SiteFunctionGroupConnection {
    distinct(field: SiteFunctionFieldsEnum!): [String!]!
    edges: [SiteFunctionEdge!]!
    field: String!
    fieldValue: String
    group(field: SiteFunctionFieldsEnum!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
    max(field: SiteFunctionFieldsEnum!): Float
    min(field: SiteFunctionFieldsEnum!): Float
    nodes: [SiteFunction!]!
    pageInfo: PageInfo!
    sum(field: SiteFunctionFieldsEnum!): Float
    totalCount: Int!
}

type SiteGroupConnection {
    distinct(field: SiteFieldsEnum!): [String!]!
    edges: [SiteEdge!]!
    field: String!
    fieldValue: String
    group(field: SiteFieldsEnum!, limit: Int, skip: Int): [SiteGroupConnection!]!
    max(field: SiteFieldsEnum!): Float
    min(field: SiteFieldsEnum!): Float
    nodes: [Site!]!
    pageInfo: PageInfo!
    sum(field: SiteFieldsEnum!): Float
    totalCount: Int!
}

type SitePage implements Node {
    children: [Node!]!
    component: String!
    componentChunkName: String!
    id: ID!
    internal: Internal!
    internalComponentName: String!
    matchPath: String
    pageContext: JSON
    parent: Node
    path: String!
    pluginCreator: SitePlugin
}

type SitePageConnection {
    distinct(field: SitePageFieldsEnum!): [String!]!
    edges: [SitePageEdge!]!
    group(field: SitePageFieldsEnum!, limit: Int, skip: Int): [SitePageGroupConnection!]!
    max(field: SitePageFieldsEnum!): Float
    min(field: SitePageFieldsEnum!): Float
    nodes: [SitePage!]!
    pageInfo: PageInfo!
    sum(field: SitePageFieldsEnum!): Float
    totalCount: Int!
}

type SitePageEdge {
    next: SitePage
    node: SitePage!
    previous: SitePage
}

type SitePageGroupConnection {
    distinct(field: SitePageFieldsEnum!): [String!]!
    edges: [SitePageEdge!]!
    field: String!
    fieldValue: String
    group(field: SitePageFieldsEnum!, limit: Int, skip: Int): [SitePageGroupConnection!]!
    max(field: SitePageFieldsEnum!): Float
    min(field: SitePageFieldsEnum!): Float
    nodes: [SitePage!]!
    pageInfo: PageInfo!
    sum(field: SitePageFieldsEnum!): Float
    totalCount: Int!
}

type SitePlugin implements Node {
    browserAPIs: [String]
    children: [Node!]!
    id: ID!
    internal: Internal!
    name: String
    nodeAPIs: [String]
    packageJson: JSON
    parent: Node
    pluginFilepath: String
    pluginOptions: JSON
    resolve: String
    ssrAPIs: [String]
    version: String
}

type SitePluginConnection {
    distinct(field: SitePluginFieldsEnum!): [String!]!
    edges: [SitePluginEdge!]!
    group(field: SitePluginFieldsEnum!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
    max(field: SitePluginFieldsEnum!): Float
    min(field: SitePluginFieldsEnum!): Float
    nodes: [SitePlugin!]!
    pageInfo: PageInfo!
    sum(field: SitePluginFieldsEnum!): Float
    totalCount: Int!
}

type SitePluginEdge {
    next: SitePlugin
    node: SitePlugin!
    previous: SitePlugin
}

type SitePluginGroupConnection {
    distinct(field: SitePluginFieldsEnum!): [String!]!
    edges: [SitePluginEdge!]!
    field: String!
    fieldValue: String
    group(field: SitePluginFieldsEnum!, limit: Int, skip: Int): [SitePluginGroupConnection!]!
    max(field: SitePluginFieldsEnum!): Float
    min(field: SitePluginFieldsEnum!): Float
    nodes: [SitePlugin!]!
    pageInfo: PageInfo!
    sum(field: SitePluginFieldsEnum!): Float
    totalCount: Int!
}

type SiteSiteMetadata {
    description: String
    siteUrl: String
    title: String
}

enum DirectoryFieldsEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    changeTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___contentFilePath
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___contentFilePath
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___contentFilePath
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___content
    internal___contentDigest
    internal___contentFilePath
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___contentFilePath
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___contentFilePath
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___contentFilePath
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prettySize
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
}

enum FileFieldsEnum {
    absolutePath
    accessTime
    atime
    atimeMs
    base
    birthTime
    birthtime
    birthtimeMs
    blksize
    blocks
    changeTime
    childImageSharp___children
    childImageSharp___children___children
    childImageSharp___children___children___children
    childImageSharp___children___children___id
    childImageSharp___children___id
    childImageSharp___children___internal___content
    childImageSharp___children___internal___contentDigest
    childImageSharp___children___internal___contentFilePath
    childImageSharp___children___internal___description
    childImageSharp___children___internal___fieldOwners
    childImageSharp___children___internal___ignoreType
    childImageSharp___children___internal___mediaType
    childImageSharp___children___internal___owner
    childImageSharp___children___internal___type
    childImageSharp___children___parent___children
    childImageSharp___children___parent___id
    childImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___id
    childImageSharp___internal___content
    childImageSharp___internal___contentDigest
    childImageSharp___internal___contentFilePath
    childImageSharp___internal___description
    childImageSharp___internal___fieldOwners
    childImageSharp___internal___ignoreType
    childImageSharp___internal___mediaType
    childImageSharp___internal___owner
    childImageSharp___internal___type
    childImageSharp___original___height
    childImageSharp___original___src
    childImageSharp___original___width
    childImageSharp___parent___children
    childImageSharp___parent___children___children
    childImageSharp___parent___children___id
    childImageSharp___parent___id
    childImageSharp___parent___internal___content
    childImageSharp___parent___internal___contentDigest
    childImageSharp___parent___internal___contentFilePath
    childImageSharp___parent___internal___description
    childImageSharp___parent___internal___fieldOwners
    childImageSharp___parent___internal___ignoreType
    childImageSharp___parent___internal___mediaType
    childImageSharp___parent___internal___owner
    childImageSharp___parent___internal___type
    childImageSharp___parent___parent___children
    childImageSharp___parent___parent___id
    childImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    children
    childrenImageSharp
    childrenImageSharp___children
    childrenImageSharp___children___children
    childrenImageSharp___children___children___children
    childrenImageSharp___children___children___id
    childrenImageSharp___children___id
    childrenImageSharp___children___internal___content
    childrenImageSharp___children___internal___contentDigest
    childrenImageSharp___children___internal___contentFilePath
    childrenImageSharp___children___internal___description
    childrenImageSharp___children___internal___fieldOwners
    childrenImageSharp___children___internal___ignoreType
    childrenImageSharp___children___internal___mediaType
    childrenImageSharp___children___internal___owner
    childrenImageSharp___children___internal___type
    childrenImageSharp___children___parent___children
    childrenImageSharp___children___parent___id
    childrenImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___id
    childrenImageSharp___internal___content
    childrenImageSharp___internal___contentDigest
    childrenImageSharp___internal___contentFilePath
    childrenImageSharp___internal___description
    childrenImageSharp___internal___fieldOwners
    childrenImageSharp___internal___ignoreType
    childrenImageSharp___internal___mediaType
    childrenImageSharp___internal___owner
    childrenImageSharp___internal___type
    childrenImageSharp___original___height
    childrenImageSharp___original___src
    childrenImageSharp___original___width
    childrenImageSharp___parent___children
    childrenImageSharp___parent___children___children
    childrenImageSharp___parent___children___id
    childrenImageSharp___parent___id
    childrenImageSharp___parent___internal___content
    childrenImageSharp___parent___internal___contentDigest
    childrenImageSharp___parent___internal___contentFilePath
    childrenImageSharp___parent___internal___description
    childrenImageSharp___parent___internal___fieldOwners
    childrenImageSharp___parent___internal___ignoreType
    childrenImageSharp___parent___internal___mediaType
    childrenImageSharp___parent___internal___owner
    childrenImageSharp___parent___internal___type
    childrenImageSharp___parent___parent___children
    childrenImageSharp___parent___parent___id
    childrenImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    childrenImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___contentFilePath
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___contentFilePath
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___contentFilePath
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    ctime
    ctimeMs
    dev
    dir
    ext
    extension
    gid
    id
    ino
    internal___content
    internal___contentDigest
    internal___contentFilePath
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    mode
    modifiedTime
    mtime
    mtimeMs
    name
    nlink
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___contentFilePath
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___contentFilePath
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___contentFilePath
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prettySize
    publicURL
    rdev
    relativeDirectory
    relativePath
    root
    size
    sourceInstanceName
    uid
    url
}

enum GatsbyImageFormat {
    AUTO
    AVIF
    JPG
    NO_CHANGE
    PNG
    WEBP
}

enum GatsbyImageLayout {
    CONSTRAINED
    FIXED
    FULL_WIDTH
}

enum GatsbyImagePlaceholder {
    BLURRED
    DOMINANT_COLOR
    NONE
    TRACED_SVG
}

enum ImageCropFocus {
    ATTENTION
    CENTER
    EAST
    ENTROPY
    NORTH
    NORTHEAST
    NORTHWEST
    SOUTH
    SOUTHEAST
    SOUTHWEST
    WEST
}

enum ImageFit {
    CONTAIN
    COVER
    FILL
    INSIDE
    OUTSIDE
}

enum ImageFormat {
    AUTO
    AVIF
    JPG
    NO_CHANGE
    PNG
    WEBP
}

enum ImageLayout {
    CONSTRAINED
    FIXED
    FULL_WIDTH
}

enum ImagePlaceholder {
    BLURRED
    DOMINANT_COLOR
    NONE
    TRACED_SVG
}

enum ImageSharpFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___contentFilePath
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___contentFilePath
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___contentFilePath
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    id
    internal___content
    internal___contentDigest
    internal___contentFilePath
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    original___height
    original___src
    original___width
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___contentFilePath
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___contentFilePath
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___contentFilePath
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
}

enum ImgixPlaceholder {
    BLURRED
    DOMINANT_COLOR
    NONE
}

enum PotraceTurnPolicy {
    TURNPOLICY_BLACK
    TURNPOLICY_LEFT
    TURNPOLICY_MAJORITY
    TURNPOLICY_MINORITY
    TURNPOLICY_RIGHT
    TURNPOLICY_WHITE
}

enum PrismicCaseStudiesFieldsEnum {
    _previewable
    alternate_languages
    alternate_languages___id
    alternate_languages___lang
    alternate_languages___raw
    alternate_languages___type
    alternate_languages___uid
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___contentFilePath
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___contentFilePath
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___contentFilePath
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    dataRaw
    data___meta_description
    data___meta_title
    first_publication_date
    gatsbyPath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    href
    id
    internal___content
    internal___contentDigest
    internal___contentFilePath
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    lang
    last_publication_date
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___contentFilePath
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___contentFilePath
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___contentFilePath
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prismicId
    tags
    type
    uid
    url
}

enum PrismicEmbedTypeFieldsEnum {
    author_name
    author_url
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___contentFilePath
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___contentFilePath
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___contentFilePath
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    embed_url
    height
    html
    id
    internal___content
    internal___contentDigest
    internal___contentFilePath
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___contentFilePath
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___contentFilePath
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___contentFilePath
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prismicId
    provider_name
    provider_url
    thumbnail_height
    thumbnail_url
    thumbnail_width
    title
    type
    version
    width
}

enum PrismicHomepageFieldsEnum {
    _previewable
    alternate_languages
    alternate_languages___id
    alternate_languages___lang
    alternate_languages___raw
    alternate_languages___type
    alternate_languages___uid
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___contentFilePath
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___contentFilePath
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___contentFilePath
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    dataRaw
    data___meta_description
    data___meta_title
    first_publication_date
    href
    id
    internal___content
    internal___contentDigest
    internal___contentFilePath
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    lang
    last_publication_date
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___contentFilePath
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___contentFilePath
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___contentFilePath
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prismicId
    tags
    type
    url
}

enum PrismicLinkTypeEnum {
    Any
    Document
    Media
    Web
}

enum PrismicPageFieldsEnum {
    _previewable
    alternate_languages
    alternate_languages___id
    alternate_languages___lang
    alternate_languages___raw
    alternate_languages___type
    alternate_languages___uid
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___contentFilePath
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___contentFilePath
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___contentFilePath
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    dataRaw
    data___meta_description
    data___meta_title
    first_publication_date
    gatsbyPath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    href
    id
    internal___content
    internal___contentDigest
    internal___contentFilePath
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    lang
    last_publication_date
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___contentFilePath
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___contentFilePath
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___contentFilePath
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prismicId
    tags
    type
    uid
    url
}

enum PrismicShowroomFieldsEnum {
    _previewable
    alternate_languages
    alternate_languages___id
    alternate_languages___lang
    alternate_languages___raw
    alternate_languages___type
    alternate_languages___uid
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___contentFilePath
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___contentFilePath
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___contentFilePath
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    dataRaw
    data___interests
    data___interests___interest_content___html
    data___interests___interest_content___raw
    data___interests___interest_content___richText
    data___interests___interest_content___text
    data___interests___interest_image___alt
    data___interests___interest_image___copyright
    data___interests___interest_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___interests___interest_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___interests___interest_title___html
    data___interests___interest_title___raw
    data___interests___interest_title___richText
    data___interests___interest_title___text
    data___interests___is_popup_right
    data___interests___learn_more_link___id
    data___interests___learn_more_link___isBroken
    data___interests___learn_more_link___lang
    data___interests___learn_more_link___link_type
    data___interests___learn_more_link___raw
    data___interests___learn_more_link___size
    data___interests___learn_more_link___slug
    data___interests___learn_more_link___tags
    data___interests___learn_more_link___target
    data___interests___learn_more_link___type
    data___interests___learn_more_link___uid
    data___interests___learn_more_link___url
    data___interests___pin_color
    data___interests___pin_icon___alt
    data___interests___pin_icon___copyright
    data___interests___pin_icon___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___interests___pin_icon___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___interests___x_axis_percent
    data___interests___y_axis_percent
    data___showroom_image___alt
    data___showroom_image___copyright
    data___showroom_image___dimensions___height
    data___showroom_image___dimensions___width
    data___showroom_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___showroom_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___showroom_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___showroom_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___showroom_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___showroom_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___showroom_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___showroom_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___showroom_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___showroom_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___showroom_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___showroom_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___showroom_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___showroom_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___showroom_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___showroom_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___showroom_image___localFile___absolutePath
    data___showroom_image___localFile___accessTime
    data___showroom_image___localFile___atime
    data___showroom_image___localFile___atimeMs
    data___showroom_image___localFile___base
    data___showroom_image___localFile___birthTime
    data___showroom_image___localFile___birthtime
    data___showroom_image___localFile___birthtimeMs
    data___showroom_image___localFile___blksize
    data___showroom_image___localFile___blocks
    data___showroom_image___localFile___changeTime
    data___showroom_image___localFile___children
    data___showroom_image___localFile___childrenImageSharp
    data___showroom_image___localFile___ctime
    data___showroom_image___localFile___ctimeMs
    data___showroom_image___localFile___dev
    data___showroom_image___localFile___dir
    data___showroom_image___localFile___ext
    data___showroom_image___localFile___extension
    data___showroom_image___localFile___gid
    data___showroom_image___localFile___id
    data___showroom_image___localFile___ino
    data___showroom_image___localFile___mode
    data___showroom_image___localFile___modifiedTime
    data___showroom_image___localFile___mtime
    data___showroom_image___localFile___mtimeMs
    data___showroom_image___localFile___name
    data___showroom_image___localFile___nlink
    data___showroom_image___localFile___prettySize
    data___showroom_image___localFile___publicURL
    data___showroom_image___localFile___rdev
    data___showroom_image___localFile___relativeDirectory
    data___showroom_image___localFile___relativePath
    data___showroom_image___localFile___root
    data___showroom_image___localFile___size
    data___showroom_image___localFile___sourceInstanceName
    data___showroom_image___localFile___uid
    data___showroom_image___localFile___url
    data___showroom_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___title___html
    data___title___raw
    data___title___richText
    data___title___text
    first_publication_date
    href
    id
    internal___content
    internal___contentDigest
    internal___contentFilePath
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    lang
    last_publication_date
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___contentFilePath
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___contentFilePath
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___contentFilePath
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prismicId
    tags
    type
    url
}

enum PrismicSiteDataFieldsEnum {
    _previewable
    alternate_languages
    alternate_languages___id
    alternate_languages___lang
    alternate_languages___raw
    alternate_languages___type
    alternate_languages___uid
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___contentFilePath
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___contentFilePath
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___contentFilePath
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    dataRaw
    data___address___html
    data___address___raw
    data___address___richText
    data___address___text
    data___address_map___latitude
    data___address_map___longitude
    data___certifications
    data___certifications___image___alt
    data___certifications___image___copyright
    data___certifications___image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___certifications___image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
    data___certifications___link___id
    data___certifications___link___isBroken
    data___certifications___link___lang
    data___certifications___link___link_type
    data___certifications___link___raw
    data___certifications___link___size
    data___certifications___link___slug
    data___certifications___link___tags
    data___certifications___link___target
    data___certifications___link___type
    data___certifications___link___uid
    data___certifications___link___url
    data___contact_form_content___html
    data___contact_form_content___raw
    data___contact_form_content___richText
    data___contact_form_content___text
    data___contact_form_enquiry_title___html
    data___contact_form_enquiry_title___raw
    data___contact_form_enquiry_title___richText
    data___contact_form_enquiry_title___text
    data___cta_link___id
    data___cta_link___isBroken
    data___cta_link___lang
    data___cta_link___link_type
    data___cta_link___localFile___absolutePath
    data___cta_link___localFile___accessTime
    data___cta_link___localFile___atime
    data___cta_link___localFile___atimeMs
    data___cta_link___localFile___base
    data___cta_link___localFile___birthTime
    data___cta_link___localFile___birthtime
    data___cta_link___localFile___birthtimeMs
    data___cta_link___localFile___blksize
    data___cta_link___localFile___blocks
    data___cta_link___localFile___changeTime
    data___cta_link___localFile___children
    data___cta_link___localFile___childrenImageSharp
    data___cta_link___localFile___ctime
    data___cta_link___localFile___ctimeMs
    data___cta_link___localFile___dev
    data___cta_link___localFile___dir
    data___cta_link___localFile___ext
    data___cta_link___localFile___extension
    data___cta_link___localFile___gid
    data___cta_link___localFile___id
    data___cta_link___localFile___ino
    data___cta_link___localFile___mode
    data___cta_link___localFile___modifiedTime
    data___cta_link___localFile___mtime
    data___cta_link___localFile___mtimeMs
    data___cta_link___localFile___name
    data___cta_link___localFile___nlink
    data___cta_link___localFile___prettySize
    data___cta_link___localFile___publicURL
    data___cta_link___localFile___rdev
    data___cta_link___localFile___relativeDirectory
    data___cta_link___localFile___relativePath
    data___cta_link___localFile___root
    data___cta_link___localFile___size
    data___cta_link___localFile___sourceInstanceName
    data___cta_link___localFile___uid
    data___cta_link___localFile___url
    data___cta_link___raw
    data___cta_link___size
    data___cta_link___slug
    data___cta_link___tags
    data___cta_link___target
    data___cta_link___type
    data___cta_link___uid
    data___cta_link___url
    data___cta_text
    data___email
    data___feature_dropdown_links
    data___feature_dropdown_links___nav_link___id
    data___feature_dropdown_links___nav_link___isBroken
    data___feature_dropdown_links___nav_link___lang
    data___feature_dropdown_links___nav_link___link_type
    data___feature_dropdown_links___nav_link___raw
    data___feature_dropdown_links___nav_link___size
    data___feature_dropdown_links___nav_link___slug
    data___feature_dropdown_links___nav_link___tags
    data___feature_dropdown_links___nav_link___target
    data___feature_dropdown_links___nav_link___type
    data___feature_dropdown_links___nav_link___uid
    data___feature_dropdown_links___nav_link___url
    data___feature_dropdown_links___nav_text
    data___footer_navigation
    data___footer_navigation___nav_link___id
    data___footer_navigation___nav_link___isBroken
    data___footer_navigation___nav_link___lang
    data___footer_navigation___nav_link___link_type
    data___footer_navigation___nav_link___raw
    data___footer_navigation___nav_link___size
    data___footer_navigation___nav_link___slug
    data___footer_navigation___nav_link___tags
    data___footer_navigation___nav_link___target
    data___footer_navigation___nav_link___type
    data___footer_navigation___nav_link___uid
    data___footer_navigation___nav_link___url
    data___footer_navigation___nav_text
    data___navigation
    data___navigation___nav_link___id
    data___navigation___nav_link___isBroken
    data___navigation___nav_link___lang
    data___navigation___nav_link___link_type
    data___navigation___nav_link___raw
    data___navigation___nav_link___size
    data___navigation___nav_link___slug
    data___navigation___nav_link___tags
    data___navigation___nav_link___target
    data___navigation___nav_link___type
    data___navigation___nav_link___uid
    data___navigation___nav_link___url
    data___navigation___nav_text
    data___phone_number
    data___social
    data___social___social_icon
    data___social___social_link___id
    data___social___social_link___isBroken
    data___social___social_link___lang
    data___social___social_link___link_type
    data___social___social_link___raw
    data___social___social_link___size
    data___social___social_link___slug
    data___social___social_link___tags
    data___social___social_link___target
    data___social___social_link___type
    data___social___social_link___uid
    data___social___social_link___url
    first_publication_date
    href
    id
    internal___content
    internal___contentDigest
    internal___contentFilePath
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    lang
    last_publication_date
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___contentFilePath
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___contentFilePath
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___contentFilePath
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    prismicId
    tags
    type
    url
}

enum PrismicTypePathTypeFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___contentFilePath
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___contentFilePath
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___contentFilePath
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    id
    internal___content
    internal___contentDigest
    internal___contentFilePath
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    kind
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___contentFilePath
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___contentFilePath
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___contentFilePath
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    path
    type
}

enum SiteBuildMetadataFieldsEnum {
    buildTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___contentFilePath
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___contentFilePath
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___contentFilePath
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    id
    internal___content
    internal___contentDigest
    internal___contentFilePath
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___contentFilePath
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___contentFilePath
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___contentFilePath
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
}

enum SiteFieldsEnum {
    buildTime
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___contentFilePath
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___contentFilePath
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___contentFilePath
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    graphqlTypegen
    host
    id
    internal___content
    internal___contentDigest
    internal___contentFilePath
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    jsxRuntime
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___contentFilePath
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___contentFilePath
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___contentFilePath
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    pathPrefix
    polyfill
    port
    siteMetadata___description
    siteMetadata___siteUrl
    siteMetadata___title
    trailingSlash
}

enum SiteFunctionFieldsEnum {
    absoluteCompiledFilePath
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___contentFilePath
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___contentFilePath
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___contentFilePath
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    functionRoute
    id
    internal___content
    internal___contentDigest
    internal___contentFilePath
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    matchPath
    originalAbsoluteFilePath
    originalRelativeFilePath
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___contentFilePath
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___contentFilePath
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___contentFilePath
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    pluginName
    relativeCompiledFilePath
}

enum SitePageFieldsEnum {
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___contentFilePath
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___contentFilePath
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___contentFilePath
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    component
    componentChunkName
    id
    internalComponentName
    internal___content
    internal___contentDigest
    internal___contentFilePath
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    matchPath
    pageContext
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___contentFilePath
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___contentFilePath
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___contentFilePath
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    path
    pluginCreator___browserAPIs
    pluginCreator___children
    pluginCreator___children___children
    pluginCreator___children___children___children
    pluginCreator___children___children___id
    pluginCreator___children___id
    pluginCreator___children___internal___content
    pluginCreator___children___internal___contentDigest
    pluginCreator___children___internal___contentFilePath
    pluginCreator___children___internal___description
    pluginCreator___children___internal___fieldOwners
    pluginCreator___children___internal___ignoreType
    pluginCreator___children___internal___mediaType
    pluginCreator___children___internal___owner
    pluginCreator___children___internal___type
    pluginCreator___children___parent___children
    pluginCreator___children___parent___id
    pluginCreator___id
    pluginCreator___internal___content
    pluginCreator___internal___contentDigest
    pluginCreator___internal___contentFilePath
    pluginCreator___internal___description
    pluginCreator___internal___fieldOwners
    pluginCreator___internal___ignoreType
    pluginCreator___internal___mediaType
    pluginCreator___internal___owner
    pluginCreator___internal___type
    pluginCreator___name
    pluginCreator___nodeAPIs
    pluginCreator___packageJson
    pluginCreator___parent___children
    pluginCreator___parent___children___children
    pluginCreator___parent___children___id
    pluginCreator___parent___id
    pluginCreator___parent___internal___content
    pluginCreator___parent___internal___contentDigest
    pluginCreator___parent___internal___contentFilePath
    pluginCreator___parent___internal___description
    pluginCreator___parent___internal___fieldOwners
    pluginCreator___parent___internal___ignoreType
    pluginCreator___parent___internal___mediaType
    pluginCreator___parent___internal___owner
    pluginCreator___parent___internal___type
    pluginCreator___parent___parent___children
    pluginCreator___parent___parent___id
    pluginCreator___pluginFilepath
    pluginCreator___pluginOptions
    pluginCreator___resolve
    pluginCreator___ssrAPIs
    pluginCreator___version
}

enum SitePluginFieldsEnum {
    browserAPIs
    children
    children___children
    children___children___children
    children___children___children___children
    children___children___children___id
    children___children___id
    children___children___internal___content
    children___children___internal___contentDigest
    children___children___internal___contentFilePath
    children___children___internal___description
    children___children___internal___fieldOwners
    children___children___internal___ignoreType
    children___children___internal___mediaType
    children___children___internal___owner
    children___children___internal___type
    children___children___parent___children
    children___children___parent___id
    children___id
    children___internal___content
    children___internal___contentDigest
    children___internal___contentFilePath
    children___internal___description
    children___internal___fieldOwners
    children___internal___ignoreType
    children___internal___mediaType
    children___internal___owner
    children___internal___type
    children___parent___children
    children___parent___children___children
    children___parent___children___id
    children___parent___id
    children___parent___internal___content
    children___parent___internal___contentDigest
    children___parent___internal___contentFilePath
    children___parent___internal___description
    children___parent___internal___fieldOwners
    children___parent___internal___ignoreType
    children___parent___internal___mediaType
    children___parent___internal___owner
    children___parent___internal___type
    children___parent___parent___children
    children___parent___parent___id
    id
    internal___content
    internal___contentDigest
    internal___contentFilePath
    internal___description
    internal___fieldOwners
    internal___ignoreType
    internal___mediaType
    internal___owner
    internal___type
    name
    nodeAPIs
    packageJson
    parent___children
    parent___children___children
    parent___children___children___children
    parent___children___children___id
    parent___children___id
    parent___children___internal___content
    parent___children___internal___contentDigest
    parent___children___internal___contentFilePath
    parent___children___internal___description
    parent___children___internal___fieldOwners
    parent___children___internal___ignoreType
    parent___children___internal___mediaType
    parent___children___internal___owner
    parent___children___internal___type
    parent___children___parent___children
    parent___children___parent___id
    parent___id
    parent___internal___content
    parent___internal___contentDigest
    parent___internal___contentFilePath
    parent___internal___description
    parent___internal___fieldOwners
    parent___internal___ignoreType
    parent___internal___mediaType
    parent___internal___owner
    parent___internal___type
    parent___parent___children
    parent___parent___children___children
    parent___parent___children___id
    parent___parent___id
    parent___parent___internal___content
    parent___parent___internal___contentDigest
    parent___parent___internal___contentFilePath
    parent___parent___internal___description
    parent___parent___internal___fieldOwners
    parent___parent___internal___ignoreType
    parent___parent___internal___mediaType
    parent___parent___internal___owner
    parent___parent___internal___type
    parent___parent___parent___children
    parent___parent___parent___id
    pluginFilepath
    pluginOptions
    resolve
    ssrAPIs
    version
}

enum SortOrderEnum {
    ASC
    DESC
}

"A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

scalar GatsbyImageData

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"Text content with rich formatting capabilities using a Prismic format called Structured Text."
scalar PrismicStructuredText

input AVIFOptions {
    lossless: Boolean
    quality: Int
    speed: Int
}

input BlurredOptions {
    "Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this"
    toFormat: ImageFormat
    "Width of the generated low-res preview. Default is 20px"
    width: Int
}

input BooleanQueryOperatorInput {
    eq: Boolean
    in: [Boolean]
    ne: Boolean
    nin: [Boolean]
}

input DateQueryOperatorInput {
    eq: Date
    gt: Date
    gte: Date
    in: [Date]
    lt: Date
    lte: Date
    ne: Date
    nin: [Date]
}

input DirectoryFilterInput {
    absolutePath: StringQueryOperatorInput
    accessTime: DateQueryOperatorInput
    atime: DateQueryOperatorInput
    atimeMs: FloatQueryOperatorInput
    base: StringQueryOperatorInput
    birthTime: DateQueryOperatorInput
    birthtime: DateQueryOperatorInput
    birthtimeMs: FloatQueryOperatorInput
    changeTime: DateQueryOperatorInput
    children: NodeFilterListInput
    ctime: DateQueryOperatorInput
    ctimeMs: FloatQueryOperatorInput
    dev: IntQueryOperatorInput
    dir: StringQueryOperatorInput
    ext: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    gid: IntQueryOperatorInput
    id: StringQueryOperatorInput
    ino: FloatQueryOperatorInput
    internal: InternalFilterInput
    mode: IntQueryOperatorInput
    modifiedTime: DateQueryOperatorInput
    mtime: DateQueryOperatorInput
    mtimeMs: FloatQueryOperatorInput
    name: StringQueryOperatorInput
    nlink: IntQueryOperatorInput
    parent: NodeFilterInput
    prettySize: StringQueryOperatorInput
    rdev: IntQueryOperatorInput
    relativeDirectory: StringQueryOperatorInput
    relativePath: StringQueryOperatorInput
    root: StringQueryOperatorInput
    size: IntQueryOperatorInput
    sourceInstanceName: StringQueryOperatorInput
    uid: IntQueryOperatorInput
}

input DirectorySortInput {
    fields: [DirectoryFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input DuotoneGradient {
    highlight: String!
    opacity: Int
    shadow: String!
}

input FileFilterInput {
    absolutePath: StringQueryOperatorInput
    accessTime: DateQueryOperatorInput
    atime: DateQueryOperatorInput
    atimeMs: FloatQueryOperatorInput
    base: StringQueryOperatorInput
    birthTime: DateQueryOperatorInput
    birthtime: DateQueryOperatorInput
    birthtimeMs: FloatQueryOperatorInput
    blksize: IntQueryOperatorInput
    blocks: IntQueryOperatorInput
    changeTime: DateQueryOperatorInput
    childImageSharp: ImageSharpFilterInput
    children: NodeFilterListInput
    childrenImageSharp: ImageSharpFilterListInput
    ctime: DateQueryOperatorInput
    ctimeMs: FloatQueryOperatorInput
    dev: IntQueryOperatorInput
    dir: StringQueryOperatorInput
    ext: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    gid: IntQueryOperatorInput
    id: StringQueryOperatorInput
    ino: FloatQueryOperatorInput
    internal: InternalFilterInput
    mode: IntQueryOperatorInput
    modifiedTime: DateQueryOperatorInput
    mtime: DateQueryOperatorInput
    mtimeMs: FloatQueryOperatorInput
    name: StringQueryOperatorInput
    nlink: IntQueryOperatorInput
    parent: NodeFilterInput
    prettySize: StringQueryOperatorInput
    publicURL: StringQueryOperatorInput
    rdev: IntQueryOperatorInput
    relativeDirectory: StringQueryOperatorInput
    relativePath: StringQueryOperatorInput
    root: StringQueryOperatorInput
    size: IntQueryOperatorInput
    sourceInstanceName: StringQueryOperatorInput
    uid: IntQueryOperatorInput
    url: StringQueryOperatorInput
}

input FileSortInput {
    fields: [FileFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input FloatQueryOperatorInput {
    eq: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nin: [Float]
}

input GatsbyImageDataQueryOperatorInput {
    eq: GatsbyImageData
    in: [GatsbyImageData]
    ne: GatsbyImageData
    nin: [GatsbyImageData]
}

input IDQueryOperatorInput {
    eq: ID
    in: [ID]
    ne: ID
    nin: [ID]
}

input ImageSharpFilterInput {
    children: NodeFilterListInput
    fixed: ImageSharpFixedFilterInput
    fluid: ImageSharpFluidFilterInput
    gatsbyImageData: GatsbyImageDataQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    original: ImageSharpOriginalFilterInput
    parent: NodeFilterInput
    resize: ImageSharpResizeFilterInput
}

input ImageSharpFilterListInput {
    elemMatch: ImageSharpFilterInput
}

input ImageSharpFixedFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    height: FloatQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpFluidFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    originalImg: StringQueryOperatorInput
    originalName: StringQueryOperatorInput
    presentationHeight: IntQueryOperatorInput
    presentationWidth: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
}

input ImageSharpOriginalFilterInput {
    height: FloatQueryOperatorInput
    src: StringQueryOperatorInput
    width: FloatQueryOperatorInput
}

input ImageSharpResizeFilterInput {
    aspectRatio: FloatQueryOperatorInput
    height: IntQueryOperatorInput
    originalName: StringQueryOperatorInput
    src: StringQueryOperatorInput
    tracedSVG: StringQueryOperatorInput
    width: IntQueryOperatorInput
}

input ImageSharpSortInput {
    fields: [ImageSharpFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input ImgixFixedFilterInput {
    base64: StringQueryOperatorInput
    height: IntQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
    width: IntQueryOperatorInput
}

input ImgixFluidFilterInput {
    aspectRatio: FloatQueryOperatorInput
    base64: StringQueryOperatorInput
    sizes: StringQueryOperatorInput
    src: StringQueryOperatorInput
    srcSet: StringQueryOperatorInput
    srcSetWebp: StringQueryOperatorInput
    srcWebp: StringQueryOperatorInput
}

input ImgixParamsInput {
    "Alias for `pdfAnnotation`."
    annotation: Boolean
    "Specifies an aspect ratio to maintain when resizing and cropping the image. [See docs](https://docs.imgix.com/apis/url/size/ar)."
    ar: String
    "Applies automatic enhancements to images. [See docs](https://docs.imgix.com/apis/url/auto)."
    auto: String
    "Alias for `blend`."
    b: String
    "Alias for `blendAlign`."
    ba: String
    "Alias for `blendAlpha`."
    balph: Int
    "Alias for `blendCrop`."
    bc: String
    "Alias for `blendFit`."
    bf: String
    "Colors the background of padded and partially-transparent images. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/bg)."
    bg: String
    "Alias for `blendH`."
    bh: Float
    "Specifies the location of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend)."
    blend: String
    "Changes the blend alignment relative to the parent image. [See docs](https://docs.imgix.com/apis/url/blending/blend-align)."
    blendAlign: String
    "Changes the alpha of the blend image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/blending/blend-alpha)."
    blendAlpha: Int
    "Alias for `blendColor`."
    blendClr: String
    "Specifies a color to use when applying the blend. [See docs](https://docs.imgix.com/apis/url/blending/blend-color)."
    blendColor: String
    "Specifies the type of crop for blend images. [See docs](https://docs.imgix.com/apis/url/blending/blend-crop)."
    blendCrop: String
    "Specifies the fit mode for blend images. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/blending/blend-fit)."
    blendFit: String
    "Adjusts the height of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-h)."
    blendH: Float
    "Sets the blend mode for a blend image. Default: `overlay`. [See docs](https://docs.imgix.com/apis/url/blending/blend-mode)."
    blendMode: String
    "Applies padding to the blend image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-pad)."
    blendPad: Int
    "Adjusts the size of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-size)."
    blendSize: String
    "Adjusts the width of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-w)."
    blendW: Float
    "Adjusts the x-offset of the blend image relative to its parent. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-x)."
    blendX: Int
    "Adjusts the y-offset of the blend image relative to its parent. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-y)."
    blendY: Int
    "Alias for `blendAlign`."
    blendalign: String
    "Alias for `blendAlpha`."
    blendalpha: Int
    "Alias for `blendColor`."
    blendclr: String
    "Alias for `blendColor`."
    blendcolor: String
    "Alias for `blendCrop`."
    blendcrop: String
    "Alias for `blendFit`."
    blendfit: String
    "Alias for `blendH`."
    blendh: Float
    "Alias for `blendMode`."
    blendmode: String
    "Alias for `blendPad`."
    blendpad: Int
    "Alias for `blendSize`."
    blendsize: String
    "Alias for `blendW`."
    blendw: Float
    "Alias for `blendX`."
    blendx: Int
    "Alias for `blendY`."
    blendy: Int
    "Applies a gaussian blur to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/blur)."
    blur: Int
    "Alias for `blendMode`."
    bm: String
    "Applies a border to an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border)."
    border: String
    "Sets bottom border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-bottom)."
    borderBottom: Int
    "Sets left border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-left)."
    borderLeft: Int
    "Sets the outer radius of the image's border in pixels. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-radius)."
    borderRadius: String
    "Sets the inner radius of the image's border in pixels. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-radius-inner)."
    borderRadiusInner: String
    "Sets right border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-right)."
    borderRight: Int
    "Sets top border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-top)."
    borderTop: Int
    "Alias for `blendPad`."
    bp: Int
    "Adjusts the brightness of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/bri)."
    bri: Int
    "Alias for `blendSize`."
    bs: String
    "Alias for `blendW`."
    bw: Float
    "Alias for `blendX`."
    bx: Int
    "Alias for `blendY`."
    by: Int
    "Sets one or more Client-Hints headers. [See docs](https://docs.imgix.com/apis/url/format/ch)."
    ch: String
    "Specifies the output chroma subsampling rate. Default: `420`. [See docs](https://docs.imgix.com/apis/url/format/chromasub)."
    chromasub: Int
    "Limits the number of unique colors in an image. [See docs](https://docs.imgix.com/apis/url/format/colorquant)."
    colorquant: Int
    "Specifies how many colors to include in a palette-extraction response. Default: `6`. [See docs](https://docs.imgix.com/apis/url/color-palette/colors)."
    colors: Int
    "Adjusts the contrast of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/con)."
    con: Int
    "Specifies the radius value for a rounded corner mask. [See docs](https://docs.imgix.com/apis/url/mask/corner-radius)."
    cornerRadius: String
    "Specifies how to crop an image. [See docs](https://docs.imgix.com/apis/url/size/crop)."
    crop: String
    "Specifies the color space of the output image. [See docs](https://docs.imgix.com/apis/url/format/cs)."
    cs: String
    "Forces a URL to use send-file in its response. [See docs](https://docs.imgix.com/apis/url/format/dl)."
    dl: String
    "Sets the DPI value in the EXIF header. [See docs](https://docs.imgix.com/apis/url/format/dpi)."
    dpi: Int
    "Adjusts the device-pixel ratio of the output image. Default: `1`. [See docs](https://docs.imgix.com/apis/url/dpr)."
    dpr: Float
    "Applies a duotone effect to the source image. [See docs](https://docs.imgix.com/apis/url/stylize/duotone)."
    duotone: String
    "Changes the alpha of the duotone effect atop the source image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/stylize/duotone-alpha)."
    duotoneAlpha: Int
    "Adjusts the exposure of the output image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/exp)."
    exp: Int
    "A Unix timestamp specifying a UTC time. Requests made to this URL after that time will output a 404 status code. [See docs](https://docs.imgix.com/apis/url/expires)."
    expires: String
    "Alias for `fit`."
    f: String
    "Selects a face to crop to. [See docs](https://docs.imgix.com/apis/url/face-detection/faceindex)."
    faceindex: Int
    "Adjusts padding around a selected face. Default: `1`. [See docs](https://docs.imgix.com/apis/url/face-detection/facepad)."
    facepad: Float
    "Specifies that face data should be included in output when combined with `fm=json`. [See docs](https://docs.imgix.com/apis/url/face-detection/faces)."
    faces: Int
    "Determines how to fill in additional space created by the fit setting. [See docs](https://docs.imgix.com/apis/url/fill/fill)."
    fill: String
    "Sets the fill color for images with additional space created by the fit setting. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/fill/fill-color)."
    fillColor: String
    "Alias for `fillColor`."
    fillcolor: String
    "Specifies how to map the source image to the output image dimensions. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/size/fit)."
    fit: String
    "Flips an image on a specified axis. [See docs](https://docs.imgix.com/apis/url/rotation/flip)."
    flip: String
    "Changes the format of the output image. [See docs](https://docs.imgix.com/apis/url/format/fm)."
    fm: String
    "Displays crosshairs identifying the location of the set focal point. Default: `false`. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-debug)."
    fpDebug: Boolean
    "Sets the relative horizontal value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-x)."
    fpX: Float
    "Sets the relative vertical value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-y)."
    fpY: Float
    "Sets the relative zoom value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-z)."
    fpZ: Float
    "Adjusts the gamma of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/gam)."
    gam: Int
    "Sets grid colors for the transparency checkerboard grid."
    gridColors: String
    "Sets grid size for the transparency checkerboard grid."
    gridSize: Int
    "Adjusts the height of the output image. [See docs](https://docs.imgix.com/apis/url/size/h)."
    h: Float
    "Alias for `h`."
    height: Float
    "Adjusts the highlights of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/high)."
    high: Int
    "Applies a half-tone effect to the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/htn)."
    htn: Int
    "Adjusts the hue of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/hue)."
    hue: Int
    "Alias for `invert`."
    inv: Boolean
    "Inverts the colors on the source image. Default: `false`. [See docs](https://docs.imgix.com/apis/url/adjustment/invert)."
    invert: Boolean
    "Determine if IPTC data should be passed for JPEG images."
    iptc: String
    "Specifies that the output image should be a lossless variant. Default: `false`. [See docs](https://docs.imgix.com/apis/url/format/lossless)."
    lossless: Boolean
    "Alias for `mark`."
    m: String
    "Alias for `markAlign`."
    ma: String
    "Alias for `markAlpha`."
    malph: Int
    "Specifies the location of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark)."
    mark: String
    "Changes the watermark alignment relative to the parent image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-align)."
    markAlign: String
    "Changes the alpha of the watermark image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-alpha)."
    markAlpha: Int
    "Changes base URL of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-base)."
    markBase: String
    "Specifies the fit mode for watermark images. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-fit)."
    markFit: String
    "Adjusts the height of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-h)."
    markH: Float
    "Applies padding to the watermark image. Default: `5`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-pad)."
    markPad: Int
    "Rotates a watermark or tiled watermarks by a specified number of degrees. Default: `0`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-rot)."
    markRot: Float
    "Adjusts the scale of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-scale)."
    markScale: Int
    "Adds tiled watermark. [See docs](https://docs.imgix.com/apis/url/watermark/mark-tile)."
    markTile: String
    "Adjusts the width of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-w)."
    markW: Float
    "Adjusts the x-offset of the watermark image relative to its parent. [See docs](https://docs.imgix.com/apis/url/watermark/mark-x)."
    markX: Int
    "Adjusts the y-offset of the watermark image relative to its parent. [See docs](https://docs.imgix.com/apis/url/watermark/mark-y)."
    markY: Int
    "Alias for `markAlign`."
    markalign: String
    "Alias for `markAlpha`."
    markalpha: Int
    "Alias for `markBase`."
    markbase: String
    "Alias for `markFit`."
    markfit: String
    "Alias for `markH`."
    markh: Float
    "Alias for `markPad`."
    markpad: Int
    "Alias for `markScale`."
    markscale: Int
    "Alias for `markTile`."
    marktile: String
    "Alias for `markW`."
    markw: Float
    "Alias for `markX`."
    markx: Int
    "Alias for `markY`."
    marky: Int
    "Defines the type of mask and specifies the URL if that type is selected. [See docs](https://docs.imgix.com/apis/url/mask)."
    mask: String
    "Colors the background of the transparent mask area of images. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/mask/mask-bg)."
    maskBg: String
    "Alias for `maskBg`."
    maskbg: String
    "Specifies the maximum height of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/max-height)."
    maxH: Int
    "Alias for `maxH`."
    maxHeight: Int
    "Specifies the maximum width of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/max-width)."
    maxW: Int
    "Alias for `maxW`."
    maxWidth: Int
    "Alias for `markBase`."
    mb: String
    "Alias for `markFit`."
    mf: String
    "Alias for `markH`."
    mh: Float
    "Specifies the minimum height of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/min-height)."
    minH: Int
    "Alias for `minH`."
    minHeight: Int
    "Specifies the minimum width of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/min-width)."
    minW: Int
    "Alias for `minW`."
    minWidth: Int
    "Alias for `monochrome`."
    mono: String
    "Applies a monochrome effect to the source image. [See docs](https://docs.imgix.com/apis/url/stylize/monochrome)."
    monochrome: String
    "Alias for `markPad`."
    mp: Int
    "Alias for `markScale`."
    ms: Int
    "Alias for `markTile`."
    mtile: String
    "Alias for `markW`."
    mw: Float
    "Alias for `markX`."
    mx: Int
    "Alias for `markY`."
    my: Int
    "Reduces the noise in an image. Default: `20`. [See docs](https://docs.imgix.com/apis/url/noise-reduction/nr)."
    nr: Int
    "Provides a threshold by which to sharpen an image. Default: `20`. [See docs](https://docs.imgix.com/apis/url/noise-reduction/nrs)."
    nrs: Int
    "Alias for `orient`."
    or: Int
    "Changes the image orientation. [See docs](https://docs.imgix.com/apis/url/rotation/orient)."
    orient: Int
    "Pads an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad)."
    pad: Int
    "Sets bottom padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-bottom)."
    padBottom: Int
    "Sets left padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-left)."
    padLeft: Int
    "Sets right padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-right)."
    padRight: Int
    "Sets top padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-top)."
    padTop: Int
    "Selects a page from a PDF for display. Default: `1`. [See docs](https://docs.imgix.com/apis/url/pdf/page)."
    page: Int
    "Specifies an output format for palette-extraction. [See docs](https://docs.imgix.com/apis/url/color-palette/palette)."
    palette: String
    "Enables or disables PDF annotation. Default: `true`. [See docs](https://docs.imgix.com/apis/url/pdf/pdf-annotation)."
    pdfAnnotation: Boolean
    "Specifies a CSS prefix for all classes in palette-extraction. Default: `image`. [See docs](https://docs.imgix.com/apis/url/color-palette/prefix)."
    prefix: String
    "Applies a pixelation effect to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/px)."
    px: Int
    "Adjusts the quality of an output image. Default: `75`. [See docs](https://docs.imgix.com/apis/url/format/q)."
    q: Int
    "Crops an image to a specified rectangle. [See docs](https://docs.imgix.com/apis/url/size/rect)."
    rect: String
    "Rotates an image by a specified number of degrees. Default: `0`. [See docs](https://docs.imgix.com/apis/url/rotation/rot)."
    rot: Float
    "Adjusts the saturation of an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/sat)."
    sat: Int
    "Applies a sepia effect to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/sepia)."
    sepia: Int
    "Adjusts the highlights of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/shad)."
    shad: Float
    "Adjusts the sharpness of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/sharp)."
    sharp: Float
    "Alias for `txt`."
    t: String
    "Alias for `txtAlign`."
    ta: String
    "Alias for `txtColor`."
    tc: String
    "Alias for `txtClip`."
    tcl: String
    "Alias for `txtFont`."
    tf: String
    "Alias for `txtLine`."
    tl: Int
    "Alias for `txtPad`."
    tp: Int
    "Adds checkerboard behind images which support transparency. [See docs](https://docs.imgix.com/apis/url/fill/transparency)."
    transparency: String
    "Trims the source image. [See docs](https://docs.imgix.com/apis/url/trim/trim)."
    trim: String
    "Specifies a trim color on a trim operation. [See docs](https://docs.imgix.com/apis/url/trim/trim-color)."
    trimColor: String
    "Specifies the mean difference on a trim operation. Default: `11`. [See docs](https://docs.imgix.com/apis/url/trim/trim-md)."
    trimMd: Float
    "Pads the area of the source image before trimming. Default: `0`. [See docs](https://docs.imgix.com/apis/url/trim/trim-pad)."
    trimPad: Int
    "Specifies the standard deviation on a trim operation. Default: `10`. [See docs](https://docs.imgix.com/apis/url/trim/trim-sd)."
    trimSd: Float
    "Specifies the tolerance on a trim operation. Default: `0`. [See docs](https://docs.imgix.com/apis/url/trim/trim-tol)."
    trimTol: Float
    "Alias for `trimColor`."
    trimcolor: String
    "Alias for `trimMd`."
    trimmd: Float
    "Alias for `trimPad`."
    trimpad: Int
    "Alias for `trimSd`."
    trimsd: Float
    "Alias for `trimTol`."
    trimtol: Float
    "Alias for `txtShad`."
    tsh: Float
    "Alias for `txtSize`."
    tsz: Int
    "Alias for `txtTrack`."
    tt: Int
    "Sets the text string to render. [See docs](https://docs.imgix.com/apis/url/text/txt)."
    txt: String
    "Sets the vertical and horizontal alignment of rendered text relative to the base image. [See docs](https://docs.imgix.com/apis/url/text/txt-align)."
    txtAlign: String
    "Sets the clipping properties of rendered text. Default: `end`. [See docs](https://docs.imgix.com/apis/url/text/txt-clip)."
    txtClip: String
    "Alias for `txtColor`."
    txtClr: String
    "Specifies the color of rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-color)."
    txtColor: String
    "Specifies the fit approach for rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-fit)."
    txtFit: String
    "Selects a font for rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-font)."
    txtFont: String
    "Sets the leading (line spacing) for rendered text. Only works on the multi-line text endpoint. Default: `0`. [See docs](https://docs.imgix.com/apis/url/typesetting/txt-lead)."
    txtLead: Int
    "Controls the level of ligature substitution. [See docs](https://docs.imgix.com/apis/url/text/txt-lig)."
    txtLig: Int
    "Outlines the rendered text with a specified color. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-line)."
    txtLine: Int
    "Alias for `txtLineColor`."
    txtLineClr: String
    "Specifies a text outline color. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/text/txt-line-color)."
    txtLineColor: String
    "Specifies the padding (in device-independent pixels) between a textbox and the edges of the base image. [See docs](https://docs.imgix.com/apis/url/text/txt-pad)."
    txtPad: Int
    "Applies a shadow to rendered text. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-shad)."
    txtShad: Float
    "Sets the font size of rendered text. Default: `12`. [See docs](https://docs.imgix.com/apis/url/text/txt-size)."
    txtSize: Int
    "Sets the tracking (letter spacing) for rendered text. Only works on the multi-line text endpoint. Default: `0`. [See docs](https://docs.imgix.com/apis/url/typesetting/txt-track)."
    txtTrack: Int
    "Sets the width of rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-width)."
    txtWidth: Int
    "Sets the horizontal (x) position of the text in pixels relative to the left edge of the base image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-x)."
    txtX: Int
    "Sets the vertical (y) position of the text in pixels relative to the top edge of the base image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-y)."
    txtY: Int
    "Alias for `txtAlign`."
    txtalign: String
    "Alias for `txtClip`."
    txtclip: String
    "Alias for `txtColor`."
    txtclr: String
    "Alias for `txtColor`."
    txtcolor: String
    "Alias for `txtFit`."
    txtfit: String
    "Alias for `txtFont`."
    txtfont: String
    "Alias for `txtLead`."
    txtlead: Int
    "Alias for `txtLig`."
    txtlig: Int
    "Alias for `txtLine`."
    txtline: Int
    "Alias for `txtLineColor`."
    txtlineclr: String
    "Alias for `txtLineColor`."
    txtlinecolor: String
    "Alias for `txtPad`."
    txtpad: Int
    "Alias for `txtShad`."
    txtshad: Float
    "Alias for `txtSize`."
    txtsize: Int
    "Alias for `txtTrack`."
    txttrack: Int
    "Alias for `txtWidth`."
    txtwidth: Int
    "Alias for `txtX`."
    txtx: Int
    "Alias for `txtY`."
    txty: Int
    "Sharpens the source image using an unsharp mask. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/usm)."
    usm: Int
    "Specifies the radius for an unsharp mask operation. Default: `2.5`. [See docs](https://docs.imgix.com/apis/url/adjustment/usmrad)."
    usmrad: Float
    "Adjusts the vibrance of an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/vib)."
    vib: Int
    "Adjusts the width of the output image. [See docs](https://docs.imgix.com/apis/url/size/w)."
    w: Float
    "Alias for `w`."
    width: Float
}

input IntQueryOperatorInput {
    eq: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nin: [Int]
}

input InternalFilterInput {
    content: StringQueryOperatorInput
    contentDigest: StringQueryOperatorInput
    contentFilePath: StringQueryOperatorInput
    description: StringQueryOperatorInput
    fieldOwners: StringQueryOperatorInput
    ignoreType: BooleanQueryOperatorInput
    mediaType: StringQueryOperatorInput
    owner: StringQueryOperatorInput
    type: StringQueryOperatorInput
}

input JPGOptions {
    progressive: Boolean = true
    quality: Int
}

input JSONQueryOperatorInput {
    eq: JSON
    glob: JSON
    in: [JSON]
    ne: JSON
    nin: [JSON]
    regex: JSON
}

input NodeFilterInput {
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
}

input NodeFilterListInput {
    elemMatch: NodeFilterInput
}

input PNGOptions {
    compressionSpeed: Int = 4
    quality: Int
}

input Potrace {
    alphaMax: Float
    background: String
    blackOnWhite: Boolean
    color: String
    optCurve: Boolean
    optTolerance: Float
    threshold: Int
    turdSize: Float
    turnPolicy: PotraceTurnPolicy
}

input PrismicAlternateLanguageTypeFilterInput {
    id: IDQueryOperatorInput
    lang: StringQueryOperatorInput
    raw: JSONQueryOperatorInput
    type: StringQueryOperatorInput
    uid: StringQueryOperatorInput
}

input PrismicAlternateLanguageTypeFilterListInput {
    elemMatch: PrismicAlternateLanguageTypeFilterInput
}

input PrismicCaseStudiesDataTypeFilterInput {
    meta_description: StringQueryOperatorInput
    meta_title: StringQueryOperatorInput
}

input PrismicCaseStudiesFilterInput {
    _previewable: IDQueryOperatorInput
    alternate_languages: PrismicAlternateLanguageTypeFilterListInput
    children: NodeFilterListInput
    data: PrismicCaseStudiesDataTypeFilterInput
    dataRaw: JSONQueryOperatorInput
    first_publication_date: DateQueryOperatorInput
    gatsbyPath: StringQueryOperatorInput
    href: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    lang: StringQueryOperatorInput
    last_publication_date: DateQueryOperatorInput
    parent: NodeFilterInput
    prismicId: IDQueryOperatorInput
    tags: StringQueryOperatorInput
    type: StringQueryOperatorInput
    uid: StringQueryOperatorInput
    url: StringQueryOperatorInput
}

input PrismicCaseStudiesSortInput {
    fields: [PrismicCaseStudiesFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input PrismicEmbedTypeFilterInput {
    author_name: StringQueryOperatorInput
    author_url: StringQueryOperatorInput
    children: NodeFilterListInput
    embed_url: StringQueryOperatorInput
    height: IntQueryOperatorInput
    html: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
    prismicId: StringQueryOperatorInput
    provider_name: StringQueryOperatorInput
    provider_url: StringQueryOperatorInput
    thumbnail_height: IntQueryOperatorInput
    thumbnail_url: StringQueryOperatorInput
    thumbnail_width: IntQueryOperatorInput
    title: StringQueryOperatorInput
    type: StringQueryOperatorInput
    version: StringQueryOperatorInput
    width: IntQueryOperatorInput
}

input PrismicEmbedTypeSortInput {
    fields: [PrismicEmbedTypeFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input PrismicGeoPointTypeFilterInput {
    latitude: FloatQueryOperatorInput
    longitude: FloatQueryOperatorInput
}

input PrismicHomepageDataTypeFilterInput {
    meta_description: StringQueryOperatorInput
    meta_title: StringQueryOperatorInput
}

input PrismicHomepageFilterInput {
    _previewable: IDQueryOperatorInput
    alternate_languages: PrismicAlternateLanguageTypeFilterListInput
    children: NodeFilterListInput
    data: PrismicHomepageDataTypeFilterInput
    dataRaw: JSONQueryOperatorInput
    first_publication_date: DateQueryOperatorInput
    href: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    lang: StringQueryOperatorInput
    last_publication_date: DateQueryOperatorInput
    parent: NodeFilterInput
    prismicId: IDQueryOperatorInput
    tags: StringQueryOperatorInput
    type: StringQueryOperatorInput
    url: StringQueryOperatorInput
}

input PrismicHomepageSortInput {
    fields: [PrismicHomepageFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input PrismicImageDimensionsTypeFilterInput {
    height: IntQueryOperatorInput
    width: IntQueryOperatorInput
}

input PrismicLinkTypeEnumQueryOperatorInput {
    eq: PrismicLinkTypeEnum
    in: [PrismicLinkTypeEnum]
    ne: PrismicLinkTypeEnum
    nin: [PrismicLinkTypeEnum]
}

input PrismicLinkTypeFilterInput {
    id: IDQueryOperatorInput
    isBroken: BooleanQueryOperatorInput
    lang: StringQueryOperatorInput
    link_type: PrismicLinkTypeEnumQueryOperatorInput
    localFile: FileFilterInput
    raw: JSONQueryOperatorInput
    size: IntQueryOperatorInput
    slug: StringQueryOperatorInput
    tags: StringQueryOperatorInput
    target: StringQueryOperatorInput
    type: StringQueryOperatorInput
    uid: StringQueryOperatorInput
    url: StringQueryOperatorInput
}

input PrismicPageDataTypeFilterInput {
    meta_description: StringQueryOperatorInput
    meta_title: StringQueryOperatorInput
}

input PrismicPageFilterInput {
    _previewable: IDQueryOperatorInput
    alternate_languages: PrismicAlternateLanguageTypeFilterListInput
    children: NodeFilterListInput
    data: PrismicPageDataTypeFilterInput
    dataRaw: JSONQueryOperatorInput
    first_publication_date: DateQueryOperatorInput
    gatsbyPath: StringQueryOperatorInput
    href: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    lang: StringQueryOperatorInput
    last_publication_date: DateQueryOperatorInput
    parent: NodeFilterInput
    prismicId: IDQueryOperatorInput
    tags: StringQueryOperatorInput
    type: StringQueryOperatorInput
    uid: StringQueryOperatorInput
    url: StringQueryOperatorInput
}

input PrismicPageSortInput {
    fields: [PrismicPageFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input PrismicShowroomDataInterestsFilterInput {
    interest_content: PrismicStructuredTextTypeFilterInput
    interest_image: PrismicShowroomDataInterestsInterestImageImageTypeFilterInput
    interest_title: PrismicStructuredTextTypeFilterInput
    is_popup_right: BooleanQueryOperatorInput
    learn_more_link: PrismicLinkTypeFilterInput
    pin_color: StringQueryOperatorInput
    pin_icon: PrismicShowroomDataInterestsPinIconImageTypeFilterInput
    x_axis_percent: FloatQueryOperatorInput
    y_axis_percent: FloatQueryOperatorInput
}

input PrismicShowroomDataInterestsFilterListInput {
    elemMatch: PrismicShowroomDataInterestsFilterInput
}

input PrismicShowroomDataInterestsInterestImageImageTypeFilterInput {
    alt: StringQueryOperatorInput
    copyright: StringQueryOperatorInput
    dimensions: PrismicImageDimensionsTypeFilterInput
    fixed: ImgixFixedFilterInput
    fluid: ImgixFluidFilterInput
    gatsbyImageData: JSONQueryOperatorInput
    localFile: FileFilterInput
    url: StringQueryOperatorInput
}

input PrismicShowroomDataInterestsPinIconImageTypeFilterInput {
    alt: StringQueryOperatorInput
    copyright: StringQueryOperatorInput
    dimensions: PrismicImageDimensionsTypeFilterInput
    fixed: ImgixFixedFilterInput
    fluid: ImgixFluidFilterInput
    gatsbyImageData: JSONQueryOperatorInput
    localFile: FileFilterInput
    url: StringQueryOperatorInput
}

input PrismicShowroomDataShowroomImageImageTypeFilterInput {
    alt: StringQueryOperatorInput
    copyright: StringQueryOperatorInput
    dimensions: PrismicImageDimensionsTypeFilterInput
    fixed: ImgixFixedFilterInput
    fluid: ImgixFluidFilterInput
    gatsbyImageData: JSONQueryOperatorInput
    localFile: FileFilterInput
    url: StringQueryOperatorInput
}

input PrismicShowroomDataTypeFilterInput {
    interests: PrismicShowroomDataInterestsFilterListInput
    showroom_image: PrismicShowroomDataShowroomImageImageTypeFilterInput
    title: PrismicStructuredTextTypeFilterInput
}

input PrismicShowroomFilterInput {
    _previewable: IDQueryOperatorInput
    alternate_languages: PrismicAlternateLanguageTypeFilterListInput
    children: NodeFilterListInput
    data: PrismicShowroomDataTypeFilterInput
    dataRaw: JSONQueryOperatorInput
    first_publication_date: DateQueryOperatorInput
    href: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    lang: StringQueryOperatorInput
    last_publication_date: DateQueryOperatorInput
    parent: NodeFilterInput
    prismicId: IDQueryOperatorInput
    tags: StringQueryOperatorInput
    type: StringQueryOperatorInput
    url: StringQueryOperatorInput
}

input PrismicShowroomSortInput {
    fields: [PrismicShowroomFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input PrismicSiteDataDataCertificationsFilterInput {
    image: PrismicSiteDataDataCertificationsImageImageTypeFilterInput
    link: PrismicLinkTypeFilterInput
}

input PrismicSiteDataDataCertificationsFilterListInput {
    elemMatch: PrismicSiteDataDataCertificationsFilterInput
}

input PrismicSiteDataDataCertificationsImageImageTypeFilterInput {
    alt: StringQueryOperatorInput
    copyright: StringQueryOperatorInput
    dimensions: PrismicImageDimensionsTypeFilterInput
    fixed: ImgixFixedFilterInput
    fluid: ImgixFluidFilterInput
    gatsbyImageData: JSONQueryOperatorInput
    localFile: FileFilterInput
    url: StringQueryOperatorInput
}

input PrismicSiteDataDataFeatureDropdownLinksFilterInput {
    nav_link: PrismicLinkTypeFilterInput
    nav_text: StringQueryOperatorInput
}

input PrismicSiteDataDataFeatureDropdownLinksFilterListInput {
    elemMatch: PrismicSiteDataDataFeatureDropdownLinksFilterInput
}

input PrismicSiteDataDataFooterNavigationFilterInput {
    nav_link: PrismicLinkTypeFilterInput
    nav_text: StringQueryOperatorInput
}

input PrismicSiteDataDataFooterNavigationFilterListInput {
    elemMatch: PrismicSiteDataDataFooterNavigationFilterInput
}

input PrismicSiteDataDataNavigationFilterInput {
    nav_link: PrismicLinkTypeFilterInput
    nav_text: StringQueryOperatorInput
}

input PrismicSiteDataDataNavigationFilterListInput {
    elemMatch: PrismicSiteDataDataNavigationFilterInput
}

input PrismicSiteDataDataSocialFilterInput {
    social_icon: StringQueryOperatorInput
    social_link: PrismicLinkTypeFilterInput
}

input PrismicSiteDataDataSocialFilterListInput {
    elemMatch: PrismicSiteDataDataSocialFilterInput
}

input PrismicSiteDataDataTypeFilterInput {
    address: PrismicStructuredTextTypeFilterInput
    address_map: PrismicGeoPointTypeFilterInput
    certifications: PrismicSiteDataDataCertificationsFilterListInput
    contact_form_content: PrismicStructuredTextTypeFilterInput
    contact_form_enquiry_title: PrismicStructuredTextTypeFilterInput
    cta_link: PrismicLinkTypeFilterInput
    cta_text: StringQueryOperatorInput
    email: StringQueryOperatorInput
    feature_dropdown_links: PrismicSiteDataDataFeatureDropdownLinksFilterListInput
    footer_navigation: PrismicSiteDataDataFooterNavigationFilterListInput
    navigation: PrismicSiteDataDataNavigationFilterListInput
    phone_number: StringQueryOperatorInput
    social: PrismicSiteDataDataSocialFilterListInput
}

input PrismicSiteDataFilterInput {
    _previewable: IDQueryOperatorInput
    alternate_languages: PrismicAlternateLanguageTypeFilterListInput
    children: NodeFilterListInput
    data: PrismicSiteDataDataTypeFilterInput
    dataRaw: JSONQueryOperatorInput
    first_publication_date: DateQueryOperatorInput
    href: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    lang: StringQueryOperatorInput
    last_publication_date: DateQueryOperatorInput
    parent: NodeFilterInput
    prismicId: IDQueryOperatorInput
    tags: StringQueryOperatorInput
    type: StringQueryOperatorInput
    url: StringQueryOperatorInput
}

input PrismicSiteDataSortInput {
    fields: [PrismicSiteDataFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input PrismicStructuredTextQueryOperatorInput {
    eq: PrismicStructuredText
    in: [PrismicStructuredText]
    ne: PrismicStructuredText
    nin: [PrismicStructuredText]
}

input PrismicStructuredTextTypeFilterInput {
    html: StringQueryOperatorInput
    raw: PrismicStructuredTextQueryOperatorInput
    richText: PrismicStructuredTextQueryOperatorInput
    text: StringQueryOperatorInput
}

input PrismicTypePathTypeFilterInput {
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    kind: StringQueryOperatorInput
    parent: NodeFilterInput
    path: StringQueryOperatorInput
    type: StringQueryOperatorInput
}

input PrismicTypePathTypeSortInput {
    fields: [PrismicTypePathTypeFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SiteBuildMetadataFilterInput {
    buildTime: DateQueryOperatorInput
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    parent: NodeFilterInput
}

input SiteBuildMetadataSortInput {
    fields: [SiteBuildMetadataFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SiteFilterInput {
    buildTime: DateQueryOperatorInput
    children: NodeFilterListInput
    graphqlTypegen: BooleanQueryOperatorInput
    host: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    jsxRuntime: StringQueryOperatorInput
    parent: NodeFilterInput
    pathPrefix: StringQueryOperatorInput
    polyfill: BooleanQueryOperatorInput
    port: IntQueryOperatorInput
    siteMetadata: SiteSiteMetadataFilterInput
    trailingSlash: StringQueryOperatorInput
}

input SiteFunctionFilterInput {
    absoluteCompiledFilePath: StringQueryOperatorInput
    children: NodeFilterListInput
    functionRoute: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    matchPath: StringQueryOperatorInput
    originalAbsoluteFilePath: StringQueryOperatorInput
    originalRelativeFilePath: StringQueryOperatorInput
    parent: NodeFilterInput
    pluginName: StringQueryOperatorInput
    relativeCompiledFilePath: StringQueryOperatorInput
}

input SiteFunctionSortInput {
    fields: [SiteFunctionFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SitePageFilterInput {
    children: NodeFilterListInput
    component: StringQueryOperatorInput
    componentChunkName: StringQueryOperatorInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    internalComponentName: StringQueryOperatorInput
    matchPath: StringQueryOperatorInput
    pageContext: JSONQueryOperatorInput
    parent: NodeFilterInput
    path: StringQueryOperatorInput
    pluginCreator: SitePluginFilterInput
}

input SitePageSortInput {
    fields: [SitePageFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SitePluginFilterInput {
    browserAPIs: StringQueryOperatorInput
    children: NodeFilterListInput
    id: StringQueryOperatorInput
    internal: InternalFilterInput
    name: StringQueryOperatorInput
    nodeAPIs: StringQueryOperatorInput
    packageJson: JSONQueryOperatorInput
    parent: NodeFilterInput
    pluginFilepath: StringQueryOperatorInput
    pluginOptions: JSONQueryOperatorInput
    resolve: StringQueryOperatorInput
    ssrAPIs: StringQueryOperatorInput
    version: StringQueryOperatorInput
}

input SitePluginSortInput {
    fields: [SitePluginFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input SiteSiteMetadataFilterInput {
    description: StringQueryOperatorInput
    siteUrl: StringQueryOperatorInput
    title: StringQueryOperatorInput
}

input SiteSortInput {
    fields: [SiteFieldsEnum]
    order: [SortOrderEnum] = [ASC]
}

input StringQueryOperatorInput {
    eq: String
    glob: String
    in: [String]
    ne: String
    nin: [String]
    regex: String
}

input TransformOptions {
    cropFocus: ImageCropFocus = ATTENTION
    duotone: DuotoneGradient
    fit: ImageFit = COVER
    grayscale: Boolean = false
    rotate: Int = 0
    trim: Float = 0.0
}

input WebPOptions {
    quality: Int
}
